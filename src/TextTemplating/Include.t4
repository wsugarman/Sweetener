<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
    // Must use hostspecific="true" in order to use include this file

    const int MaxDelegateParameters = 16;
    const int SpacesPerTab          = 4;
    
    public string GetTemplateFileName()
        => Path.GetFileName(Host.TemplateFile);

    public void SaveOutput(string outputFileName)
    {
        if (string.IsNullOrWhiteSpace(outputFileName))
            throw new ArgumentException("Must specify file name");

        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath    = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
        GenerationEnvironment.Length = 0; // Remove everything written thus far
    }

    public string GetTypeParameters(int count)
        => GetInputTypeParameters(count);

    public string GetActionTypeParameters(int count, bool async = false, bool interruptable = false, bool contravariant = false)
        => GetInputTypeParameters(count, interruptable, contravariant) + (async ? (count > 0 || interruptable ? ", Task" : "Task") : string.Empty);

    public string GetFuncTypeParameters(int count, bool async = false, bool interruptable = false, bool variance = false)
        => GetInputTypeParameters(count, interruptable, variance)
        + (count > 0 || interruptable ? ", " : string.Empty)
        + (async ? "Task<TResult>" : (variance ? "out " : string.Empty) + "TResult");

    private string GetInputTypeParameters(int count, bool interruptable = false, bool contravariant = false)
        => GenerateIncrementingList(count, contravariant ? "in T" : "T") // T1, T2, T3
        + (interruptable ? (count > 0 ? ", " : string.Empty) + "CancellationToken" : string.Empty);

    public string GetParameters(int count)
        => GenerateIncrementingList(count, "T", "arg"); // T1 arg1, T2 arg2, T3 arg3

    public string GetParameters(string[] types)
        => GetParameters(types, types.Length);

    public string GetParameters(string[] types, int count)
    {
        if (count == 0)
            return string.Empty;

        return string.Join(", ", types.Take(count).Select((t, i) => t + " " + (count == 1 ? "arg" : "arg" + (i + 1))));
    }

    public string GetArguments(int count)
        => GenerateIncrementingList(count, "arg"); // arg1, arg2, arg3

    private string GenerateIncrementingList(int count, params string[] pattern)
    {
        if (count < 0)
            throw new ArgumentOutOfRangeException(nameof(count));

        if (pattern == null || pattern.Length == 0)
            throw new ArgumentException("At least 1 value must be specified", nameof(pattern));

        if (count == 0)
            return string.Empty;

        IEnumerable<string> elements = Enumerable
            .Repeat(pattern, count)
            .Select((p, i) => string.Join(" ", pattern.Select(x => count == 1 ? x : x + (i + 1))));

        return string.Join(", ", elements);
    }

    public string Enclose(string value, BracketType bracketType)
    {
        if (string.IsNullOrWhiteSpace(value))
            return value;

        switch (bracketType)
        {
            case BracketType.CurlyBraces:
                return "{" + value + "}";
            case BracketType.AngleBrackets:
                return "<" + value + ">";
            case BracketType.SquareBrackets:
                return "[" + value + "]";
            case BracketType.Parentheses:
                return "(" + value + ")";
            default:
                throw new ArgumentOutOfRangeException("Unknown bracket type");
        }
    }

    public string GetNthWord(int i)
    {
        switch (i)
        {
            case  1: return "first";
            case  2: return "second";
            case  3: return "third";
            case  4: return "fourth";
            case  5: return "fifth";
            case  6: return "sixth";
            case  7: return "seventh";
            case  8: return "eighth";
            case  9: return "ninth";
            case 10: return "tenth";
            case 11: return "eleventh";
            case 12: return "twelfth";
            case 13: return "thirteenth";
            case 14: return "fourteenth";
            case 15: return "fifteenth";
            case 16: return "sixteenth";
            case 17: return "seventeenth";
            case 18: return "eighteenth";
            case 19: return "nineteenth";
            case 20: return "twentieth";
            default:
                throw new ArgumentOutOfRangeException(nameof(i), $"No word configured for {i}");
        }
    }

    public string GetWord(int i)
    {
        switch (i)
        {
            case  0: return "zero";
            case  1: return "one";
            case  2: return "two";
            case  3: return "three";
            case  4: return "four";
            case  5: return "five";
            case  6: return "six";
            case  7: return "seven";
            case  8: return "eight";
            case  9: return "nine";
            case 10: return "ten";
            case 11: return "eleven";
            case 12: return "twelve";
            case 13: return "thirteen";
            case 14: return "fourteen";
            case 15: return "fifteen";
            case 16: return "sixteen";
            case 17: return "seventeen";
            case 18: return "eighteen";
            case 19: return "nineteen";
            case 20: return "twenty";
            default:
                throw new ArgumentOutOfRangeException(nameof(i), $"No word configured for {i}");
        }
    }

    public enum BracketType
    {
        CurlyBraces,
        AngleBrackets,
        SquareBrackets,
        Parentheses,
    }
#>
