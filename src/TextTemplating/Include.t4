<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
    // Must use hostspecific="true" in order to use include this file

    const int MaxDelegateParameters = 16;
    const int SpacesPerTab          = 4;

    public string GetTemplateFileName()
        => Path.GetFileName(Host.TemplateFile);

    public void PrintHeader()
    {
#>
// Copyright © William Sugarman.
// Licensed under the MIT License.

// Do not modify this file. It was automatically generated from <#= GetTemplateFileName() #>
<#+
    }

    public void SaveOutput(string outputFileName)
    {
        if (string.IsNullOrWhiteSpace(outputFileName))
            throw new ArgumentException("Must specify file name");

        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath    = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());
        GenerationEnvironment.Length = 0; // Remove everything written thus far
    }

    private string GetInputTypeParameters(int count, string typeFormat = "T{0}", bool contravariant = false)
        => GetIncrementingStrings(contravariant ? "in " + typeFormat : typeFormat, count); // T1, T2, T3

    public string GetParameters(int count, string typeFormat = "T{0}", string nameFormat = "arg{0}")
        => GetIncrementingStrings(typeFormat + " " + nameFormat, count); // T1 arg1, T2 arg2, T3 arg3

    public string GetArguments(int count, string nameFormat = "arg{0}")
        => GetIncrementingStrings(nameFormat, count); // arg1, arg2, arg3

    private string GetIncrementingStrings(string formatString, int count)
    {
        if (count < 0)
            throw new ArgumentOutOfRangeException(nameof(count));

        if (string.IsNullOrWhiteSpace(formatString))
            throw new ArgumentNullException(nameof(formatString));

        if (count == 0)
            return string.Empty;

        IEnumerable<string> elements = Enumerable
            .Repeat(formatString, count)
            .Select((p, i) => string.Format(p, count == 1 ? (int?)null : i + 1));

        return string.Join(", ", elements);
    }

    public void PrintParamsXmlDoc(int parameterCount, int indent, string messageFormat, string parameterFormat = "arg{0}")
    {
        if (parameterCount < 0)
            throw new ArgumentOutOfRangeException(nameof(parameterCount));

        if (string.IsNullOrWhiteSpace(messageFormat))
            throw new ArgumentNullException(nameof(messageFormat));

        string spaces = new string(' ', indent * SpacesPerTab);
        for (int i = 1; i <= parameterCount; i++)
        {
            string param     = string.Format(CultureInfo.InvariantCulture, parameterFormat, parameterCount == 1 ? (int?)null : i);
            string qualifier = parameterCount == 1 ? string.Empty : GetNthWord(i) + " ";
#>
<#= spaces #>/// <param name="<#= param #>"><#= string.Format(CultureInfo.InvariantCulture, messageFormat, qualifier) #></param>
<#+
        }
    }

    public void PrintTypeParamsXmlDoc(int typeParameterCount, int indent, string messageFormat, string typeFormat = "T{0}")
    {
        if (typeParameterCount < 0)
            throw new ArgumentOutOfRangeException(nameof(typeParameterCount));

        if (string.IsNullOrWhiteSpace(messageFormat))
            throw new ArgumentNullException(nameof(messageFormat));

        string spaces = new string(' ', indent * SpacesPerTab);
        for (int i = 1; i <= typeParameterCount; i++)
        {
            string typeParameter = string.Format(CultureInfo.InvariantCulture, typeFormat, typeParameterCount == 1 ? (int?)null : i);
            string qualifier     = typeParameterCount == 1 ? string.Empty : GetNthWord(i) + " ";
#>
<#= spaces #>/// <typeparam name="<#= typeParameter #>"><#= string.Format(CultureInfo.InvariantCulture, messageFormat, qualifier) #></typeparam>
<#+
        }
    }

    public string Enclose(string value, BracketType bracketType)
    {
        if (string.IsNullOrWhiteSpace(value))
            return value;

        switch (bracketType)
        {
            case BracketType.CurlyBraces:
                return "{" + value + "}";
            case BracketType.AngleBrackets:
                return "<" + value + ">";
            case BracketType.SquareBrackets:
                return "[" + value + "]";
            case BracketType.Parentheses:
                return "(" + value + ")";
            default:
                throw new ArgumentOutOfRangeException("Unknown bracket type");
        }
    }

    public string GetNthWord(int i)
    {
        switch (i)
        {
            case  1: return "first";
            case  2: return "second";
            case  3: return "third";
            case  4: return "fourth";
            case  5: return "fifth";
            case  6: return "sixth";
            case  7: return "seventh";
            case  8: return "eighth";
            case  9: return "ninth";
            case 10: return "tenth";
            case 11: return "eleventh";
            case 12: return "twelfth";
            case 13: return "thirteenth";
            case 14: return "fourteenth";
            case 15: return "fifteenth";
            case 16: return "sixteenth";
            case 17: return "seventeenth";
            case 18: return "eighteenth";
            case 19: return "nineteenth";
            case 20: return "twentieth";
            default:
                throw new ArgumentOutOfRangeException(nameof(i), $"No word configured for {i}");
        }
    }

    public string GetWord(int i)
    {
        switch (i)
        {
            case  0: return "zero";
            case  1: return "one";
            case  2: return "two";
            case  3: return "three";
            case  4: return "four";
            case  5: return "five";
            case  6: return "six";
            case  7: return "seven";
            case  8: return "eight";
            case  9: return "nine";
            case 10: return "ten";
            case 11: return "eleven";
            case 12: return "twelve";
            case 13: return "thirteen";
            case 14: return "fourteen";
            case 15: return "fifteen";
            case 16: return "sixteen";
            case 17: return "seventeen";
            case 18: return "eighteen";
            case 19: return "nineteen";
            case 20: return "twenty";
            default:
                throw new ArgumentOutOfRangeException(nameof(i), $"No word configured for {i}");
        }
    }

    public enum BracketType
    {
        CurlyBraces,
        AngleBrackets,
        SquareBrackets,
        Parentheses,
    }
#>
