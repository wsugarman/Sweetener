<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #> ran successfully
namespace Sweetener
{
<#
    for (int parameterCount = MaxDelegateParameters + 1; parameterCount <= MaxDelegateParameters + 4; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount, variance: "in") + optionalComma + "TResult";
#>
    /// <summary>
    /// Encapsulates a method that has <#= GetWord(parameterCount) #> parameter<#= parameterCount == 1 ? string.Empty : "s" #> and returns a value of the type
    /// specified by the <typeparamref name="TResult" /> parameter.
    /// </summary>
<#
        PrintDelegateTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: true);
        PrintDelegateParamsXmlDoc    (parameterCount, indent: 1);
#>
    /// <returns>The return value of the method that this delegate encapsulates.</returns>
    public delegate TResult Func<<#= typeParameters #>>(<#= parameters #>);

<#
}
#>
}
