<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #> ran successfully
namespace Sweetener
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount, variance: "in") + optionalComma + "TResult";
#>
    /// <summary>
    /// Encapsulates a method that has <#= GetWord(parameterCount) #> parameter<#= parameterCount == 1 ? string.Empty : "s" #> and returns a value indicating whether or not it succeeded.
    /// </summary>
<#
        PrintDelegateTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: false);
#>
    /// <typeparam name="TResult">The type of the parameter assigned by the method if successful.</typeparam>
<#
        PrintDelegateParamsXmlDoc(parameterCount, indent: 1);
#>
    /// <param name="result">
    /// When the method returns, contains the value of type <typeparamref name="TResult"/>,
    /// if the method succeeded, or default value if the method failed.
    /// </param>
    /// <returns><see langword="true"/> if the function completed successfully; otherwise, <see langword="false"/>.</returns>
    public delegate bool TryFunc<<#= typeParameters #>>(<#= parameters #><#= optionalComma #>out TResult result);

<#
}
#>
}
