<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System.Threading.Tasks;

namespace Sweetener
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma         = parameterCount > 0 ? ", " : string.Empty;
        string parameters            = GetParameters    (parameterCount);
        string typeParameters        = GetTypeParameters(parameterCount, variance: "in") + optionalComma + "TResult";
        string typeParametersComment = GetTypeParameters(parameterCount) + optionalComma + "TResult";
#>
    /// <summary>
    /// Encapsulates an asynchronous method that has <#= GetWord(parameterCount) #> parameter<#= parameterCount == 1 ? string.Empty : "s" #> and returns a value
    /// of the type specified by the <typeparamref name="TResult"/> parameter.
    /// </summary>
    /// <remarks>
    /// A delegate that returns a <see cref="Task{TResult}" /> is not necessarily asynchronous, and only
    /// asynchronous delegates should be encapsulated by an <see cref="AsyncFunc{<#= typeParametersComment #>}" />.
    /// Otherwise, the delegate may be invoked incorrectly.
    /// </remarks>
<#
        PrintDelegateTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: true);
        PrintDelegateParamsXmlDoc    (parameterCount, indent: 1);
#>
    /// <returns>
    /// A task that represents the asynchronous operation. The value of the task parameter
    /// contains the return value of the method that this delegate encapsulates.
    /// </returns>
    public delegate Task<TResult> AsyncFunc<<#= typeParameters #>>(<#= parameters #>);

<#
    }
#>
}
