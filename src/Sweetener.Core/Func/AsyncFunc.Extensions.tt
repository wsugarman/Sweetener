<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System.Threading.Tasks;

namespace Sweetener
{
    /// <summary>
    /// Provides a set of methods for invoking asynchronous functions.
    /// </summary>
    public static class AsyncFuncExtensions
    {
        #region InvokeAsync

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma   = parameterCount > 0 ? ", " : string.Empty;
        string arguments       = GetArguments (parameterCount);
        string parameters      = GetParameters(parameterCount);
        string typeParameters  = GetTypeParameters(parameterCount) + optionalComma + "TResult";
#>
        /// <summary>
        /// Asynchronously invokes an <see cref="AsyncFunc{<#= typeParameters #>}" />.
        /// </summary>
<#
            PrintDelegateTypeParamsXmlDoc(parameterCount, indent: 2, includeResult: true);
#>
        /// <param name="func">The asynchronous function to invoke.</param>
<#
            PrintDelegateParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>A task that represents the asynchronous operation.</returns>
        public static async Task InvokeAsync<<#= typeParameters #>>(this AsyncFunc<<#= typeParameters #>> func<#= optionalComma #><#= parameters #>)
            => await func(<#= arguments #>).ConfigureAwait(false);

<#
    }
#>
        #endregion
    }
}
