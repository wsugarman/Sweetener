<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System.Threading.Tasks;

namespace Sweetener
{
    /// <summary>
    /// Provides a set of methods for invoking asynchronous actions.
    /// </summary>
    public static class AsyncActionExtensions
    {
        #region InvokeAsync

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma         = parameterCount > 0 ? ", " : string.Empty;
        string arguments             = GetArguments (parameterCount);
        string parameters            = GetParameters(parameterCount);
        string typeParameters        = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ">" : string.Empty;
        string typeParametersComment = parameterCount > 0 ? "{" + GetTypeParameters(parameterCount) + "}" : string.Empty;
#>
        /// <summary>
        /// Asynchronously invokes an <see cref="AsyncAction<#= typeParametersComment #>" />.
        /// </summary>
<#
            PrintDelegateTypeParamsXmlDoc(parameterCount, indent: 2, includeResult: false);
#>
        /// <param name="action">The asynchronous action to invoke.</param>
<#
            PrintDelegateParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>A task that represents the asynchronous operation.</returns>
        public static async Task InvokeAsync<#= typeParameters #>(this AsyncAction<#= typeParameters #> action<#= optionalComma #><#= parameters #>)
            => await action(<#= arguments #>).ConfigureAwait(false);

<#
    }
#>
        #endregion
    }
}
