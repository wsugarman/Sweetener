<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><# PrintHeader(); #>

using System;
using System.Threading.Tasks;

namespace Sweetener.Threading.Tasks
{
    /// <summary>
    /// Provides a set of <see langword="static"/> methods for interacting with multiple instances of <see cref="Task{T}"/> and <see cref="ValueTask{T}"/>.
    /// </summary>
    public static class MultiTask
    {
<#
        const int MaxOverloads = 8;
        for (int parameterCount = 2; parameterCount <= MaxOverloads; parameterCount++)
        {
            string parameters     = GetParameters(parameterCount, "Task<T{0}>", "task{0}");
            string typeParameters = GetInputTypeParameters(parameterCount, "T{0}");
#>
        /// <summary>
        /// Creates a task that will complete when all of the <see cref="Task{TResult}"/> objects have completed.
        /// </summary>
<#
            PrintTypeParamsXmlDoc(parameterCount, indent: 2, messageFormat: "The result type of the {0}task."       , typeFormat: "T{0}");
            PrintParamsXmlDoc    (parameterCount, indent: 2, messageFormat: "The {0}task to wait on for completion.", parameterFormat: "task{0}");
#>
        /// <returns>A task that represents the completion of all of the supplied tasks.</returns>
        public static async Task<(<#= typeParameters #>)> WhenAll<<#= typeParameters #>>(<#= parameters #>)
        {
<#
            for (int i = 1; i <= parameterCount; i++)
            {
                string taskName = string.Format(CultureInfo.InvariantCulture, "task{0}", i);
#>
            if (<#= taskName #> == null)
                throw new ArgumentNullException(nameof(<#= taskName #>));

<#
            }
#>
            await Task.WhenAll(<#= GetArguments(parameterCount, "task{0}") #>).ConfigureAwait(false);
            return (<#= GetArguments(parameterCount, "task{0}.Result") #>);
        }
<#
            // Avoid extra newlines
            if (parameterCount < MaxOverloads)
            {
#>

<#
            }
        }
#>
    }
}
