<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\TextTemplating\Include.t4" #><#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount) + (parameterCount > 0 ? ", TResult" : "TResult");
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke functions.
    /// </summary>
    public static partial class FuncExtensions
<#
        }
        else
        {
#>
    static partial class FuncExtensions
<#
        }
#>
    {
        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: false);
#>
        public static Func<<#= typeParameters #>> WithRetry<<#= typeParameters #>>(
            this Func<<#= typeParameters #>> func,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => WithRetry(func, maxRetries, r => ResultKind.Successful, exceptionPolicy, (i, r, e) => delayPolicy(i));

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: false);
#>
        public static Func<<#= typeParameters #>> WithRetry<<#= typeParameters #>>(
            this Func<<#= typeParameters #>> func,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy<TResult> delayPolicy)
            => WithRetry(func, maxRetries, r => ResultKind.Successful, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: true);
#>
        public static Func<<#= typeParameters #>> WithRetry<<#= typeParameters #>>(
            this Func<<#= typeParameters #>> func,
            int maxRetries,
            ResultPolicy<TResult> resultPolicy,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => WithRetry(func, maxRetries, resultPolicy, exceptionPolicy, (i, r, e) => delayPolicy(i));

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: true);
#>
        public static Func<<#= typeParameters #>> WithRetry<<#= typeParameters #>>(
            this Func<<#= typeParameters #>> func,
            int maxRetries,
            ResultPolicy<TResult> resultPolicy,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy<TResult> delayPolicy)
        {
            if (func == null)
                throw new ArgumentNullException(nameof(func));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (resultPolicy == null)
                throw new ArgumentNullException(nameof(resultPolicy));

            if (exceptionPolicy == null)
                throw new ArgumentNullException(nameof(exceptionPolicy));

            if (delayPolicy == null)
                throw new ArgumentNullException(nameof(delayPolicy));

            return (<#= parameters #>) =>
            {
                TResult result;
                int attempt = 0;

            Attempt:
                attempt++;
                try
                {
                    result = func(<#= arguments #>);
                }
                catch (Exception e)
                {
                    if (!exceptionPolicy(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw e;

                    Task.Delay(delayPolicy(attempt, default, e)).Wait();
                    goto Attempt;
                }

                ResultKind kind = resultPolicy(result);
                if (kind != ResultKind.Retryable || (maxRetries != Retries.Infinite && attempt > maxRetries))
                    return result;

                Task.Delay(delayPolicy(attempt, result, null)).Wait();
                goto Attempt;
            };
        }
    }
}
<#
        SaveOutput($"Func.Extensions.T{parameterCount + 1}.cs");
    }
#>
<#= GetTemplateFileName() #> ran successfully
