<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync          = async ? "Async"                  : string.Empty;
    string optionalAsyncKeyword   = async ? "async "                 : string.Empty;
    string optionalAwait          = async ? "await "                 : string.Empty;
    string optionalConfigureAwait = async ? ".ConfigureAwait(false)" : string.Empty;
    string result                 = async ? "Task<TResult>"          : "TResult";

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount) + (parameterCount > 0 ? ", TResult" : "TResult");
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke <#= async ? "asynchronous " : string.Empty #>functions.
    /// </summary>
    public static partial class <#= optionalAsync #>FuncExtensions
<#
        }
        else
        {
#>
    static partial class <#= optionalAsync #>FuncExtensions
<#
        }
#>
    {
        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: false, includeReturnsXmlDoc: true);
#>
        public static Interruptable<#= optionalAsync #>Func<<#= typeParameters #>> WithRetry<#= optionalAsync #><<#= typeParameters #>>(this <#= optionalAsync #>Func<<#= typeParameters #>> func, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            => WithRetry<#= optionalAsync #>(func, maxRetries, ReliableDelegate<TResult>.DefaultResultPolicy, exceptionPolicy, DelayPolicies.Complex<TResult>(delayPolicy));

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: false, includeReturnsXmlDoc: true);
#>
        public static Interruptable<#= optionalAsync #>Func<<#= typeParameters #>> WithRetry<#= optionalAsync #><<#= typeParameters #>>(this <#= optionalAsync #>Func<<#= typeParameters #>> func, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy<TResult> delayPolicy)
            => WithRetry<#= optionalAsync #>(func, maxRetries, ReliableDelegate<TResult>.DefaultResultPolicy, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: true, includeReturnsXmlDoc: true);
#>
        public static Interruptable<#= optionalAsync #>Func<<#= typeParameters #>> WithRetry<#= optionalAsync #><<#= typeParameters #>>(
            this <#= optionalAsync #>Func<<#= typeParameters #>> func,
            int                   maxRetries,
            ResultPolicy<TResult> resultPolicy,
            ExceptionPolicy       exceptionPolicy,
            DelayPolicy           delayPolicy)
            => WithRetry<#= optionalAsync #>(func, maxRetries, resultPolicy, exceptionPolicy, DelayPolicies.Complex<TResult>(delayPolicy));

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: true, includeReturnsXmlDoc: true);
#>
        public static Interruptable<#= optionalAsync #>Func<<#= typeParameters #>> WithRetry<#= optionalAsync #><<#= typeParameters #>>(
            this <#= optionalAsync #>Func<<#= typeParameters #>> func,
            int                         maxRetries,
            ResultPolicy<TResult>       resultPolicy,
            ExceptionPolicy             exceptionPolicy,
            ComplexDelayPolicy<TResult> delayPolicy)
        {
            if (func == null)
                throw new ArgumentNullException(nameof(func));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (resultPolicy == null)
                throw new ArgumentNullException(nameof(resultPolicy));

            if (exceptionPolicy == null)
                throw new ArgumentNullException(nameof(exceptionPolicy));

            if (delayPolicy == null)
                throw new ArgumentNullException(nameof(delayPolicy));

            return <#= optionalAsyncKeyword #>(<#= arguments #><#= optionalComma #>cancellationToken) =>
            {
                TResult result;
                int attempt = 0;

            Attempt:
                attempt++;
                try
                {
                    result = <#= optionalAwait #>func(<#= arguments #>)<#= optionalConfigureAwait #>;
                }
                catch (Exception e)
                {
                    if (!exceptionPolicy(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    <#= optionalAwait #>Task.Delay(delayPolicy(attempt, default, e), cancellationToken)<#= async ? ".ConfigureAwait(false)" : ".Wait(cancellationToken)" #>;
                    goto Attempt;
                }

                ResultKind kind = resultPolicy(result);
                if (kind != ResultKind.Transient || (maxRetries != Retries.Infinite && attempt > maxRetries))
                    return result;

                <#= optionalAwait #>Task.Delay(delayPolicy(attempt, result, null), cancellationToken)<#= async ? ".ConfigureAwait(false)" : ".Wait(cancellationToken)" #>;
                goto Attempt;
            };
        }
    }
}
<#
        SaveOutput($"{optionalAsync}Func.Extensions.T{parameterCount + 1}.cs");
    }
#>
<#= GetTemplateFileName() #> ran successfully
