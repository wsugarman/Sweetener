<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments         (parameterCount);
        string parameters     = GetParameters        (parameterCount);
        string typeParameters = GetFuncTypeParameters(parameterCount);
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke <#= async ? "asynchronous " : string.Empty #>user-defined functions.
    /// </summary>
    public static partial class <#= optionalAsync #>FuncExtensions
<#
        }
        else
        {
#>
    static partial class <#= optionalAsync #>FuncExtensions
<#
        }
#>
    {
<#
        foreach (bool interruptable in new bool[] { false, true })
        {
            string inputTypeParameters       = GetFuncTypeParameters(parameterCount, async, interruptable);
            string optionalToken             = interruptable ? optionalComma + "cancellationToken" : string.Empty;
            string optionalCancellationCheck = interruptable ? (async ? "isCanceled" : "e.IsCancellation(cancellationToken)") + " || " : string.Empty;
            string asyncOperationSuffx       = async ? ".ConfigureAwait(false)" : ".Wait(" + (interruptable ? "cancellationToken" : string.Empty) + ")";
#>
        #region Func<<#= inputTypeParameters #>>

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
            if (async)
            {
#>
        /// <remarks>
        /// The resulting function will throw <see cref="InvalidOperationException"/> if the given
        /// <paramref name="func"/> returns <see langword="null"/> instead of a valid <see cref="Task{TResult}"/>.
        /// </remarks>
<#
            }
            PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultHandler: false, includeReturnsXmlDoc: true);

#>
        public static Func<<#= inputTypeParameters #>> With<#= optionalAsync #>Retry<<#= typeParameters #>>(this Func<<#= inputTypeParameters #>> func, int maxRetries, ExceptionHandler exceptionHandler, DelayHandler delayHandler)
            => With<#= optionalAsync #>Retry(func, maxRetries, ResultPolicy.Default<TResult>(), exceptionHandler, delayHandler.ToComplex<TResult>());

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
            if (async)
            {
#>
        /// <remarks>
        /// The resulting function will throw <see cref="InvalidOperationException"/> if the given
        /// <paramref name="func"/> returns <see langword="null"/> instead of a valid <see cref="Task{TResult}"/>.
        /// </remarks>
<#
            }
            PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultHandler: false, includeReturnsXmlDoc: true);
#>
        public static Func<<#= inputTypeParameters #>> With<#= optionalAsync #>Retry<<#= typeParameters #>>(this Func<<#= inputTypeParameters #>> func, int maxRetries, ExceptionHandler exceptionHandler, ComplexDelayHandler<TResult> delayHandler)
            => With<#= optionalAsync #>Retry(func, maxRetries, ResultPolicy.Default<TResult>(), exceptionHandler, delayHandler);

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
            if (async)
            {
#>
        /// <remarks>
        /// The resulting function will throw <see cref="InvalidOperationException"/> if the given
        /// <paramref name="func"/> returns <see langword="null"/> instead of a valid <see cref="Task{TResult}"/>.
        /// </remarks>
<#
            }
            PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultHandler: true, includeReturnsXmlDoc: true);
#>
        public static Func<<#= inputTypeParameters #>> With<#= optionalAsync #>Retry<<#= typeParameters #>>(
            this Func<<#= inputTypeParameters #>> func,
            int                    maxRetries,
            ResultHandler<TResult> resultHandler,
            ExceptionHandler       exceptionHandler,
            DelayHandler           delayHandler)
            => With<#= optionalAsync #>Retry(func, maxRetries, resultHandler, exceptionHandler, delayHandler.ToComplex<TResult>());

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="func" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
            if (async)
            {
#>
        /// <remarks>
        /// The resulting function will throw <see cref="InvalidOperationException"/> if the given
        /// <paramref name="func"/> returns <see langword="null"/> instead of a valid <see cref="Task{TResult}"/>.
        /// </remarks>
<#
            }
            PrintReliableFuncCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultHandler: true, includeReturnsXmlDoc: true);

#>
        public static Func<<#= inputTypeParameters #>> With<#= optionalAsync #>Retry<<#= typeParameters #>>(
            this Func<<#= inputTypeParameters #>> func,
            int                          maxRetries,
            ResultHandler<TResult>       resultHandler,
            ExceptionHandler             exceptionHandler,
            ComplexDelayHandler<TResult> delayHandler)
        {
            if (func == null)
                throw new ArgumentNullException(nameof(func));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (resultHandler == null)
                throw new ArgumentNullException(nameof(resultHandler));

            if (exceptionHandler == null)
                throw new ArgumentNullException(nameof(exceptionHandler));

            if (delayHandler == null)
                throw new ArgumentNullException(nameof(delayHandler));

            return <#= async ? "async " : string.Empty #>(<#= arguments #><#= optionalToken #>) =>
            {
                <#= async ? "Task<TResult> t" : "TResult result" #>;
                int attempt = 0;

            Attempt:
<#
            if (async)
            {
#>
                t = null;
<#
            }
#>
                attempt++;

                try
                {
<#
            if (async)
            {
#>
                    t = func(<#= arguments #><#= optionalToken #>);
                    if (t == null)
                        goto Invalid;

                    await t.ConfigureAwait(false);
<#
            }
            else
            {
#>
                    result = func(<#= arguments #><#= optionalToken #>);
<#
            }
#>
                }
                catch (Exception e)
                {
<#
            if (async && interruptable)
            {
#>
                    bool isCanceled = t != null ? t.IsCanceled : e.IsCancellation(cancellationToken);
<#
            }
#>
                    if (<#= optionalCancellationCheck #>!exceptionHandler(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    <#= async ? "await " : string.Empty #>Task.Delay(delayHandler(attempt, default, e)<#= interruptable ? ", cancellationToken" : string.Empty #>)<#= asyncOperationSuffx #>;
                    goto Attempt;
                }

<#
            if (async)
            {
#>
                TResult result = t.Result;
<#
            }
#>
                ResultKind kind = resultHandler(result);
                if (kind != ResultKind.Transient || (maxRetries != Retries.Infinite && attempt > maxRetries))
                    return result;

                <#= async ? "await " : string.Empty #>Task.Delay(delayHandler(attempt, result, default)<#= interruptable ? ", cancellationToken" : string.Empty #>)<#= asyncOperationSuffx #>;
                goto Attempt;
<#
            if (async)
            {
#>

            Invalid:
                throw new InvalidOperationException(SR.InvalidTaskResult);
<#
            }
#>
            };
        }

        #endregion
<#
            if (!interruptable) // Are there more iterations
            {
#>

<#          }
        }
#>
    }
}
<#
        SaveOutput($"{optionalAsync}Func.Extensions.T{parameterCount + 1}.cs");
    }
#>
<#= GetTemplateFileName() #> ran successfully
