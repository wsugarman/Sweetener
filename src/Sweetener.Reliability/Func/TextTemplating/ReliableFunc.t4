<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync          = async ? "Async"                  : string.Empty;
    string optionalAsyncKeyword   = async ? "async "                 : string.Empty;
    string optionalAwait          = async ? "await "                 : string.Empty;
    string optionalConfigureAwait = async ? ".ConfigureAwait(false)" : string.Empty;
    string result                 = async ? "Task<TResult>"          : "TResult";

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments              = GetArguments     (parameterCount);
        string parameters             = GetParameters    (parameterCount);
        string optionalComma          = parameterCount > 0 ? ", " : string.Empty;
        string typeParametersNoResult = GetTypeParameters(parameterCount);
        string typeParameters         = typeParametersNoResult + optionalComma + "TResult";
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
<#
        if (async)
        {
#>
using System.Threading.Tasks;
<#
        }
#>

namespace Sweetener.Reliability
{
    /// <summary>
    /// A wrapper to reliably invoke <#= async ? "an asynchronous" : "a" #> function despite transient issues.
    /// </summary>
<#
        PrintTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: true);
#>
    public sealed class Reliable<#= optionalAsync #>Func<<#= typeParameters #>> : ReliableDelegate<TResult>
    {
        private readonly <#= optionalAsync #>Func<<#= typeParameters #>> _func;

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="<#= optionalAsync #>Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultPolicy: false, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(<#= optionalAsync #>Func<<#= typeParameters #>> func, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            : base(maxRetries, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="<#= optionalAsync #>Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultPolicy: false, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(<#= optionalAsync #>Func<<#= typeParameters #>> func, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy<TResult> delayPolicy)
            : base(maxRetries, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="<#= optionalAsync #>Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultPolicy: true, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(<#= optionalAsync #>Func<<#= typeParameters #>> func, int maxRetries, ResultPolicy<TResult> resultPolicy, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            : base(maxRetries, resultPolicy, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="<#= optionalAsync #>Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultPolicy: true, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(<#= optionalAsync #>Func<<#= typeParameters #>> func, int maxRetries, ResultPolicy<TResult> resultPolicy, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy<TResult> delayPolicy)
            : base(maxRetries, resultPolicy, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// <#= async ? "Asynchronously invokes" : "Invokes" #> the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>The return value of the method that this reliable delegate encapsulates.</returns>
        public <#= optionalAsyncKeyword #><#= result #> Invoke<#= optionalAsync #>(<#= parameters #>)
            => <#= optionalAwait #>Invoke<#= optionalAsync #>(<#= arguments #><#= optionalComma #>CancellationToken.None)<#= optionalConfigureAwait #>;

        /// <summary>
        /// <#= async ? "Asynchronously invokes" : "Invokes" #> the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <returns>The return value of the method that this reliable delegate encapsulates.</returns>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public <#= optionalAsyncKeyword #><#= result #> Invoke<#= optionalAsync #>(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken)
        {
            TResult result;
            int attempt = 0;

        Attempt:
            attempt++;
            try
            {
                result = <#= optionalAwait #>_func(<#= arguments #>)<#= async ? ".ConfigureAwait(false)" : string.Empty #>;
            }
            catch (Exception exception)
            {
                if (<#= optionalAwait #>CanRetry<#= optionalAsync #>(attempt, exception, cancellationToken)<#= optionalConfigureAwait #>)
                    goto Attempt;

                throw;
            }

            ResultKind kind = _validate(result);
            if (kind == ResultKind.Successful || !<#= optionalAwait #>CanRetry<#= optionalAsync #>(attempt, result, kind, cancellationToken)<#= optionalConfigureAwait #>)
                return result;

            goto Attempt;
        }

<#
        if (!async)
        {
#>
        /// <summary>
        /// Attempts to successfully invoke the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="result">
        /// When this method returns, contains the result of the underlying delegate,
        /// if it completed successfully, or the default value if it failed. The parameter
        /// is passed unitialized; any value originally supplied in result will be overwritten.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed successfully
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        public bool TryInvoke(<#= parameters #><#= optionalComma #>out TResult result)
            => TryInvoke(<#= arguments #><#= optionalComma #>CancellationToken.None, out result);

        /// <summary>
        /// Attempts to successfully invoke the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <param name="result">
        /// When this method returns, contains the result of the underlying delegate,
        /// if it completed successfully, or the default value if it failed. The parameter
        /// is passed unitialized; any value originally supplied in result will be overwritten.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed successfully
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public bool TryInvoke(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken, out TResult result)
        {
            int attempt = 0;
            bool retry = false;
            do
            {
                attempt++;
                try
                {
                    result = _func(<#= arguments #>);
                }
                catch (Exception exception)
                {
                    retry = CanRetry(attempt, exception, cancellationToken);
                    continue;
                }

                ResultKind kind = _validate(result);
                if (kind == ResultKind.Successful)
                    return true;

                retry = CanRetry(attempt, result, kind, cancellationToken);
            } while (retry);

            result = default;
            return false;
        }
<#
        }
#>
    }
}
<#
        SaveOutput($"Reliable{optionalAsync}Func.T{parameterCount + 1}.cs");
    }
#>
<#= GetTemplateFileName() #> ran successfully
