<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments         (parameterCount);
        string parameters     = GetParameters        (parameterCount);
        string typeParameters = GetFuncTypeParameters(parameterCount);
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
    /// <summary>
    /// A wrapper to reliably invoke <#= async ? "an asynchronous" : "a" #> function despite transient issues.
    /// </summary>
<#
        PrintTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: true);
#>
    public sealed class Reliable<#= optionalAsync #>Func<<#= typeParameters #>> : ReliableDelegate<TResult>
    {
        private readonly Func<<#= GetFuncTypeParameters(parameterCount, async, interruptable: true) #>> _func;
<#
        foreach (bool interruptable in new bool[] { false, true })
        {
            string inputTypeParameters = GetFuncTypeParameters(parameterCount, async, interruptable);
#>

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <#= async ? "asynchronous " : string.Empty #>function at most a specific number of times
        /// based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultHandler: false, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(Func<<#= inputTypeParameters #>> func, int maxRetries, ExceptionHandler exceptionHandler, DelayHandler delayHandler)
            : <#= interruptable ? "base(" : "this(func.IgnoreInterruption(), " #>maxRetries, exceptionHandler, delayHandler)
<#
            if (interruptable)
            {
#>
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }
<#
            }
            else
            {
#>
        { }
<#
            }
#>

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <#= async ? "asynchronous " : string.Empty #>function at most a specific number of times
        /// based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultHandler: false, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(Func<<#= inputTypeParameters #>> func, int maxRetries, ExceptionHandler exceptionHandler, ComplexDelayHandler<TResult> delayHandler)
            : <#= interruptable ? "base(" : "this(func.IgnoreInterruption(), " #>maxRetries, exceptionHandler, delayHandler)
<#
            if (interruptable)
            {
#>
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }
<#
            }
            else
            {
#>
        { }
<#
            }
#>

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <#= async ? "asynchronous " : string.Empty #>function at most a specific number of times
        /// based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultHandler: true, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(Func<<#= inputTypeParameters #>> func, int maxRetries, ResultHandler<TResult> resultHandler, ExceptionHandler exceptionHandler, DelayHandler delayHandler)
            : <#= interruptable ? "base(" : "this(func.IgnoreInterruption(), " #>maxRetries, resultHandler, exceptionHandler, delayHandler)
<#
            if (interruptable)
            {
#>
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }
<#
            }
            else
            {
#>
        { }
<#
            }
#>

        /// <summary>
        /// Initializes a new instance of the <see cref="Reliable<#= optionalAsync #>Func{<#= typeParameters #>}"/>
        /// class that executes the given <#= async ? "asynchronous " : string.Empty #>function at most a specific number of times
        /// based on the provided policies.
        /// </summary>
<#
        PrintReliableFuncCtorXmlDoc(indent: 2, includeResultHandler: true, includeReturnsXmlDoc: false);
#>
        public Reliable<#= optionalAsync #>Func(Func<<#= inputTypeParameters #>> func, int maxRetries, ResultHandler<TResult> resultHandler, ExceptionHandler exceptionHandler, ComplexDelayHandler<TResult> delayHandler)
            : <#= interruptable ? "base(" : "this(func.IgnoreInterruption(), " #>maxRetries, resultHandler, exceptionHandler, delayHandler)
<#
            if (interruptable)
            {
#>
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }
<#
            }
            else
            {
#>
        { }
<#
            }
        }

        if (!async)
        {
#>

        /// <summary>
        /// Invokes the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>The return value of the method that this reliable delegate encapsulates.</returns>
        public TResult Invoke(<#= parameters #>)
            => Invoke(<#= arguments #><#= optionalComma #>CancellationToken.None);

        /// <summary>
        /// Invokes the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <returns>The return value of the method that this reliable delegate encapsulates.</returns>
        /// <exception cref="ObjectDisposedException">
        /// The underlying <see cref="CancellationTokenSource" /> has already been disposed.
        /// </exception>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public TResult Invoke(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken)
        {
            TResult result;
            int attempt = 0;

        Attempt:
            attempt++;

            try
            {
                result = _func(<#= arguments #><#= optionalComma #>cancellationToken);
            }
            catch (Exception e)
            {
                if (e.IsCancellation(cancellationToken) || !CanRetry(attempt, e, cancellationToken))
                    throw;

                goto Attempt;
            }

            ResultKind kind = _validate(result);
            if (kind == ResultKind.Successful || !CanRetry(attempt, result, kind, cancellationToken))
                return result;

            goto Attempt;
        }
<#
        }
#>

        /// <summary>
        /// Asynchronously invokes the encapsulated method despite transient errors.
        /// </summary>
<#
        if (!async)
        {
#>
        /// <remarks>
        /// If the encapsulated method succeeds without retrying, the method executes synchronously.
        /// </remarks>
<#
        }
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>The return value of the method that this reliable delegate encapsulates.</returns>
        public async Task<TResult> InvokeAsync(<#= parameters #>)
            => await InvokeAsync(<#= arguments #><#= optionalComma #>CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously invokes the encapsulated method despite transient errors.
        /// </summary>
<#
        if (!async)
        {
#>
        /// <remarks>
        /// If the encapsulated method succeeds without retrying, the method executes synchronously.
        /// </remarks>
<#
        }
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <returns>The return value of the method that this reliable delegate encapsulates.</returns>
        /// <exception cref="ObjectDisposedException">
        /// The underlying <see cref="CancellationTokenSource" /> has already been disposed.
        /// </exception>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public async Task<TResult> InvokeAsync(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken)
        {
            <#= async ? "Task<TResult> t = null" : "TResult result" #>;
            int attempt = 0;

        Attempt:
            attempt++;

            try
            {
<#
        if (async)
        {
#>
                t = _func(<#= arguments #><#= optionalComma #>cancellationToken);
                await t.ConfigureAwait(false);
<#
        }
        else
        {
#>
                result = _func(<#= arguments #><#= optionalComma #>cancellationToken);
<#
        }
#>
            }
            catch (Exception e)
            {
                if (<#= async ? "t.IsCanceled" : "e.IsCancellation(cancellationToken)" #> || !await CanRetryAsync(attempt, e, cancellationToken).ConfigureAwait(false))
                    throw;

                goto Attempt;
            }

<#
        if (async)
        {
#>
            TResult result = t.Result;
<#
        }
#>
            ResultKind kind = _validate(result);
            if (kind == ResultKind.Successful || !await CanRetryAsync(attempt, result, kind, cancellationToken).ConfigureAwait(false))
                return result;

            goto Attempt;
        }
<#
        if (!async)
        {
#>

        /// <summary>
        /// Attempts to successfully invoke the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="result">
        /// When this method returns, contains the result of the underlying delegate,
        /// if it completed successfully, or the default value if it failed. The parameter
        /// is passed unitialized; any value originally supplied in result will be overwritten.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed successfully
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        public bool TryInvoke(<#= parameters #><#= optionalComma #>out TResult result)
            => TryInvoke(<#= arguments #><#= optionalComma #>CancellationToken.None, out result);

        /// <summary>
        /// Attempts to successfully invoke the encapsulated method despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <param name="result">
        /// When this method returns, contains the result of the underlying delegate,
        /// if it completed successfully, or the default value if it failed. The parameter
        /// is passed unitialized; any value originally supplied in result will be overwritten.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed successfully
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="ObjectDisposedException">
        /// The underlying <see cref="CancellationTokenSource" /> has already been disposed.
        /// </exception>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public bool TryInvoke(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken, out TResult result)
        {
            int attempt = 0;
            bool retry = false;

            do
            {
                attempt++;

                try
                {
                    result = _func(<#= arguments #><#= optionalComma #>cancellationToken);
                }
                catch (Exception e)
                {
                    if (e.IsCancellation(cancellationToken))
                        throw;

                    retry = CanRetry(attempt, e, cancellationToken);
                    continue;
                }

                ResultKind kind = _validate(result);
                if (kind == ResultKind.Successful)
                    return true;

                retry = CanRetry(attempt, result, kind, cancellationToken);
            } while (retry);

            result = default;
            return false;
        }
<#
        }
#>
    }
}
<#
        SaveOutput($"Reliable{optionalAsync}Func.T{parameterCount + 1}.cs");
    }
#>
<#= GetTemplateFileName() #> ran successfully
