<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\TextTemplating\Include.t4" #>// Generated from ReliableFunc.Create.tt
using System;

namespace Sweetener.Reliability
{
    /// <summary>
    /// Provides a set of methods for creating reliable functions.
    /// </summary>
    public static class ReliableFunc
    {
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount) + (parameterCount > 0 ? ", TResult" : "TResult");
#>
        #region Create<<#= typeParameters #>>

        /// <summary>
        /// Creates a new <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: false);
#>
        public static ReliableFunc<<#= typeParameters #>> Create<<#= typeParameters #>>(
            Func<<#= typeParameters #>> func, int maxRetries,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => new ReliableFunc<<#= typeParameters #>>(func, maxRetries, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: false);
#>
        public static ReliableFunc<<#= typeParameters #>> Create<<#= typeParameters #>>(
            Func<<#= typeParameters #>> func, int maxRetries,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy<TResult> delayPolicy)
            => new ReliableFunc<<#= typeParameters #>>(func, maxRetries, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: true);
#>
        public static ReliableFunc<<#= typeParameters #>> Create<<#= typeParameters #>>(
            Func<<#= typeParameters #>> func, int maxRetries,
            ResultPolicy<TResult> resultPolicy,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => new ReliableFunc<<#= typeParameters #>>(func, maxRetries, resultPolicy, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, typeParameterCount: parameterCount, includeResultPolicy: true);
#>
        public static ReliableFunc<<#= typeParameters #>> Create<<#= typeParameters #>>(
            Func<<#= typeParameters #>> func, int maxRetries,
            ResultPolicy<TResult> resultPolicy,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy<TResult> delayPolicy)
            => new ReliableFunc<<#= typeParameters #>>(func, maxRetries, resultPolicy, exceptionPolicy, delayPolicy);

        #endregion

<#
}
#>
    }
}
