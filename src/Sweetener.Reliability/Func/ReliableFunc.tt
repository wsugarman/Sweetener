<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\TextTemplating\Include.t4" #><#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments              = GetArguments     (parameterCount);
        string parameters             = GetParameters    (parameterCount);
        string optionalComma          = parameterCount > 0 ? ", " : string.Empty;
        string typeParametersNoResult = GetTypeParameters(parameterCount);
        string typeParameters         = typeParametersNoResult + optionalComma + "TResult";
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;

namespace Sweetener.Reliability
{
    /// <summary>
    /// A wrapper to reliably invoke a function despite transient issues.
    /// </summary>
<#
        PrintTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: true);
#>
    public sealed class ReliableFunc<<#= typeParameters #>> : ReliableDelegate<TResult>
    {
        private readonly Func<<#= typeParameters #>> _func;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, includeResultPolicy: false);
#>
        public ReliableFunc(Func<<#= typeParameters #>> func, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            : base(maxRetries, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, includeResultPolicy: false);
#>
        public ReliableFunc(Func<<#= typeParameters #>> func, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy<TResult> delayPolicy)
            : base(maxRetries, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, includeResultPolicy: true);
#>
        public ReliableFunc(Func<<#= typeParameters #>> func, int maxRetries, ResultPolicy<TResult> resultPolicy, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            : base(maxRetries, resultPolicy, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReliableFunc{<#= typeParameters #>}"/>
        /// class that executes the given <see cref="Func{<#= typeParameters #>}"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintFuncParamsXmlDoc(indent: 2, includeResultPolicy: true);
#>
        public ReliableFunc(Func<<#= typeParameters #>> func, int maxRetries, ResultPolicy<TResult> resultPolicy, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy<TResult> delayPolicy)
            : base(maxRetries, resultPolicy, exceptionPolicy, delayPolicy)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        /// <summary>
        /// Attempts to successfully invoke the underlying delegate despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="result">
        /// When this method returns, contains the result of the underlying delegate,
        /// if it completed successfully, or the default value if it failed. The parameter
        /// is passed unitialized; any value originally supplied in result will be overwritten.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed successfully
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        public bool TryInvoke(<#= parameters #><#= optionalComma #>out TResult result)
            => TryInvoke(<#= arguments #><#= optionalComma #>CancellationToken.None, out result);

        /// <summary>
        /// Attempts to successfully invoke the underlying delegate despite transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <param name="result">
        /// When this method returns, contains the result of the underlying delegate,
        /// if it completed successfully, or the default value if it failed. The parameter
        /// is passed unitialized; any value originally supplied in result will be overwritten.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed successfully
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public bool TryInvoke(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken, out TResult result)
        {
            int attempt = 0;
            bool retry = false;
            do
            {
                attempt++;
                try
                {
                    result = _func(<#= arguments #>);
                }
                catch (Exception exception)
                {
                    retry = CanRetry(attempt, exception, cancellationToken);
                    continue;
                }

                ResultKind kind = _validate(result);
                if (kind == ResultKind.Successful)
                    return true;

                retry = CanRetry(attempt, result, kind, cancellationToken);
            } while (retry);

            result = default;
            return false;
        }

        /// <summary>
        /// Invokes the underlying delegate and automatically if it encounters transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>The return value of the underlying delegate.</returns>
        public TResult Invoke(<#= parameters #>)
            => Invoke(<#= arguments #><#= optionalComma #>CancellationToken.None);

        /// <summary>
        /// Invokes the underlying delegate and automatically if it encounters transient errors.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">A cancellation token to observe while waiting for the operation to complete.</param>
        /// <returns>The return value of the underlying delegate.</returns>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public TResult Invoke(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken)
        {
            TResult result;
            int attempt = 0;

        Attempt:
            attempt++;
            try
            {
                result = _func(<#= arguments #>);
            }
            catch (Exception exception)
            {
                if (CanRetry(attempt, exception, cancellationToken))
                    goto Attempt;

                throw exception;
            }

            ResultKind kind = _validate(result);
            if (kind == ResultKind.Successful || !CanRetry(attempt, result, kind, cancellationToken))
                return result;

            goto Attempt;
        }

        /// <summary>
        /// Implicitly converts the <paramref name="reliableFunc"/> to an
        /// <see cref="Func{<#= typeParameters #>}"/>.
        /// </summary>
        /// <remarks>
        /// The resulting function is equivalent to <see cref="Invoke(<#= typeParametersNoResult #>)"/>.
        /// </remarks>
        /// <param name="reliableFunc">An operation that may be retried due to transient failures.</param>
        public static implicit operator Func<<#= typeParameters #>>(ReliableFunc<<#= typeParameters #>> reliableFunc)
            => reliableFunc.Invoke;
    }
}
<#
        SaveOutput($"ReliableFunc.T{parameterCount + 1}.cs");
    }
#>
<#= GetTemplateFileName() #> ran successfully
