<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments(parameterCount);
        string typeParameters = Enclose(GetActionTypeParameters(parameterCount), BracketType.AngleBrackets);
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke user-defined actions.
    /// </summary>
    public static partial class ActionExtensions
<#
        }
        else
        {
#>
    static partial class ActionExtensions
<#
        }
#>
    {
<#
        foreach (bool async in new bool[] { false, true })
        {
            string optionalAsync = async ? "Async" : string.Empty;

            foreach (bool interruptable in new bool[] { false, true })
            {
                string inputActionType           = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable), BracketType.AngleBrackets);
                string optionalCancellationCheck = interruptable ? (async ? "t.IsCanceled()" : "e.IsCancellation(cancellationToken)") + " || " : string.Empty;
                string asyncOperationSuffx       = async ? ".ConfigureAwait(false)" : ".Wait(" + (interruptable ? "cancellationToken" : string.Empty) + ")";
#>
        #region <#= inputActionType #>

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static <#= inputActionType #> With<#= optionalAsync #>Retry<#= typeParameters #>(this <#= inputActionType #> action, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            => With<#= optionalAsync #>Retry(action, maxRetries, exceptionPolicy, DelayPolicies.Complex(delayPolicy));

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static <#= inputActionType #> With<#= optionalAsync #>Retry<#= typeParameters #>(this <#= inputActionType #> action, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy delayPolicy)
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (exceptionPolicy == null)
                throw new ArgumentNullException(nameof(exceptionPolicy));

            if (delayPolicy == null)
                throw new ArgumentNullException(nameof(delayPolicy));

            return <#= async ? "async " : string.Empty #>(<#= arguments #><#= interruptable ? optionalComma + "cancellationToken" : string.Empty #>) =>
            {
<#
        if (async)
        {
#>
                Task t;
<#
        }
#>
                int attempt = 0;

            Attempt:
                attempt++;
<#
        if (async)
        {
#>
                t = null;
<#
        }
#>
                try
                {
<#
        if (async)
        {
#>
                    t = action(<#= arguments #><#= interruptable ? optionalComma + "cancellationToken" : string.Empty #>);
                    await t.ConfigureAwait(false);
<#
        }
        else
        {
#>
                    action(<#= arguments #><#= interruptable ? optionalComma + "cancellationToken" : string.Empty #>);
<#
        }
#>
                    return;
                }
                catch (Exception e)
                {
                    if (<#= optionalCancellationCheck #>!exceptionPolicy(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    <#= async ? "await " : string.Empty #>Task.Delay(delayPolicy(attempt, e)<#= interruptable ? ", cancellationToken" : string.Empty #>)<#= asyncOperationSuffx #>;
                    goto Attempt;
                }
            };
        }

        #endregion

<#
            }
        }
#>
    }
}
<#
        string fileName = parameterCount == 0 ? $"Action.Extensions.cs" : $"Action.Extensions.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
