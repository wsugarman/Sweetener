<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;

namespace Sweetener.Reliability
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount, variance: "in") + ">" : string.Empty;
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
    /// <summary>
    /// Encapsulates a method with <#= GetWord(parameterCount) #> parameter<#= parameterCount == 1 ? string.Empty : "s" #> and no return value that may be
    /// cancelled prematurely using the optional <paramref name="cancellationToken" />.
    /// </summary>
<#
        PrintTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: false);
        PrintParamsXmlDoc(parameterCount, indent: 1);
#>
    /// <param name="cancellationToken">
    /// An optional cancellation token to observe while waiting for the operation to complete.
    /// </param>
    /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
    public delegate void InterruptableAction<#= typeParameters #>(<#= parameters #><#= optionalComma #>CancellationToken cancellationToken = default);

<#
    }
#>
}
