<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\TextTemplating\Include.t4" #><#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount);
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;

        string typeParametersCode    = typeParameters == string.Empty ? string.Empty : "<" + typeParameters + ">";
        string typeParametersComment = typeParameters == string.Empty ? string.Empty : "{" + typeParameters + "}";
#>
// Generated from <#= GetTemplateFileName() #>
using System;

namespace Sweetener.Reliability
{
    partial class ReliableAction
    {
        /// <summary>
        /// Creates a new <see cref="ReliableAction<#= typeParametersComment #>"/>
        /// that executes the given <see cref="Action<#= typeParametersComment #>"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static ReliableAction<#= typeParametersCode #> Create<#= typeParametersCode #>(
            Action<#= typeParametersCode #> action,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => new ReliableAction<#= typeParametersCode #>(action, maxRetries, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="ReliableAction<#= typeParametersComment #>"/>
        /// that executes the given <see cref="Action<#= typeParametersComment #>"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static ReliableAction<#= typeParametersCode #> Create<#= typeParametersCode #>(
            Action<#= typeParametersCode #> action,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy delayPolicy)
            => new ReliableAction<#= typeParametersCode #>(action, maxRetries, exceptionPolicy, delayPolicy);
    }
}
<#
        string fileName = parameterCount == 0 ? "ReliableAction.Create.cs" : $"ReliableAction.Create.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
