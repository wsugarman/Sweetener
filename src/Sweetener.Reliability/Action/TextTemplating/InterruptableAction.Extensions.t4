<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments(parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ">" : string.Empty;
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
// Generated from <#= GetTemplateFileName() #>
using System;
<#
        if (parameterCount == 0)
        {
#>
using System.Threading;
<#
        }
#>
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke <#= async ? "asynchronous " : string.Empty #> actions
    /// that can be interrupted using a <see cref="CancellationToken" />.
    /// </summary>
    public static partial class Interruptable<#= optionalAsync #>ActionExtensions
<#
        }
        else
        {
#>
    static partial class Interruptable<#= optionalAsync #>ActionExtensions
<#
        }
#>
    {
<#
        if (!async)
        {
#>
        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static InterruptableAction<#= typeParameters #> WithRetry<#= typeParameters #>(this InterruptableAction<#= typeParameters #> action, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            => WithRetry(action, maxRetries, exceptionPolicy, DelayPolicies.Complex(delayPolicy));

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static InterruptableAction<#= typeParameters #> WithRetry<#= typeParameters #>(this InterruptableAction<#= typeParameters #> action, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy delayPolicy)
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (exceptionPolicy == null)
                throw new ArgumentNullException(nameof(exceptionPolicy));

            if (delayPolicy == null)
                throw new ArgumentNullException(nameof(delayPolicy));

            return (<#= arguments #><#= optionalComma #>cancellationToken) =>
            {
                int attempt = 0;

            Attempt:
                attempt++;
                try
                {
                    action(<#= arguments #><#= optionalComma #>cancellationToken);
                    return;
                }
                catch (Exception e)
                {
                    if (e.IsCancellation(cancellationToken) || !exceptionPolicy(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    Task.Delay(delayPolicy(attempt, e), cancellationToken).Wait(cancellationToken);
                    goto Attempt;
                }
            };
        }

<#
        }
#>
        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static InterruptableAsyncAction<#= typeParameters #> WithAsyncRetry<#= typeParameters #>(this Interruptable<#= optionalAsync #>Action<#= typeParameters #> action, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            => WithAsyncRetry(action, maxRetries, exceptionPolicy, DelayPolicies.Complex(delayPolicy));

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static InterruptableAsyncAction<#= typeParameters #> WithAsyncRetry<#= typeParameters #>(this Interruptable<#= optionalAsync #>Action<#= typeParameters #> action, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy delayPolicy)
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (exceptionPolicy == null)
                throw new ArgumentNullException(nameof(exceptionPolicy));

            if (delayPolicy == null)
                throw new ArgumentNullException(nameof(delayPolicy));

            return async (<#= arguments #><#= optionalComma #>cancellationToken) =>
            {
<#
        if (async)
        {
#>
                Task t;
<#
        }
#>
                int attempt = 0;

            Attempt:
<#
        if (async)
        {
#>
                t = null;
<#
        }
#>
                attempt++;
                try
                {
<#
        if (async)
        {
#>
                    t = action(<#= arguments #><#= optionalComma #>cancellationToken);
                    await t.ConfigureAwait(false);
<#
        }
        else
        {
#>
                    action(<#= arguments #><#= optionalComma #>cancellationToken);
<#
        }
#>
                    return;
                }
                catch (Exception e)
                {
                    if (<#= async ? "t.IsCanceled()" : "e.IsCancellation(cancellationToken)" #> || !exceptionPolicy(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    await Task.Delay(delayPolicy(attempt, e), cancellationToken).ConfigureAwait(false);
                    goto Attempt;
                }
            };
        }
    }
}
<#
        string fileName = parameterCount == 0 ? $"Interruptable{optionalAsync}Action.Extensions.cs" : $"Interruptable{optionalAsync}Action.Extensions.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
