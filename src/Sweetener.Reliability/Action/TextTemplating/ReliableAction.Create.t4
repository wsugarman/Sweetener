<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments (parameterCount);
        string parameters     = GetParameters(parameterCount);

        string typeParameters        = GetActionTypeParameters(parameterCount);
        string typeParametersCode    = Enclose(typeParameters, BracketType.AngleBrackets);
        string typeParametersComment = Enclose(typeParameters, BracketType.CurlyBraces  );

        string inputActionTypeCode         = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable: false), BracketType.AngleBrackets);
        string inputActionTypeComment      = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable: false), BracketType.CurlyBraces  );
        string tokenInputActionTypeCode    = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable: true ), BracketType.AngleBrackets);
        string tokenInputActionTypeComment = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable: true ), BracketType.CurlyBraces  );
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
<#
        if (async)
        {
#>
using System.Threading.Tasks;
<#
        }
#>

namespace Sweetener.Reliability
{
    partial class Reliable<#= optionalAsync #>Action
    {
        /// <summary>
        /// Creates a new <see cref="Reliable<#= optionalAsync #>Action<#= typeParametersComment #>"/>
        /// that executes the given <see cref="<#= inputActionTypeComment #>"/>
        /// at most a specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Reliable<#= optionalAsync #>Action<#= typeParametersCode #> Create<#= typeParametersCode #>(
            <#= inputActionTypeCode #> action,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => new Reliable<#= optionalAsync #>Action<#= typeParametersCode #>(action, maxRetries, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="Reliable<#= optionalAsync #>Action<#= typeParametersComment #>"/>
        /// that executes the given <see cref="<#= inputActionTypeComment #>"/>
        /// at most a specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Reliable<#= optionalAsync #>Action<#= typeParametersCode #> Create<#= typeParametersCode #>(
            <#= inputActionTypeCode #> action,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy delayPolicy)
            => new Reliable<#= optionalAsync #>Action<#= typeParametersCode #>(action, maxRetries, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="Reliable<#= optionalAsync #>Action<#= typeParametersComment #>"/>
        /// that executes the given <see cref="<#= tokenInputActionTypeComment #>"/>
        /// at most a specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Reliable<#= optionalAsync #>Action<#= typeParametersCode #> Create<#= typeParametersCode #>(
            <#= tokenInputActionTypeCode #> action,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            DelayPolicy delayPolicy)
            => new Reliable<#= optionalAsync #>Action<#= typeParametersCode #>(action, maxRetries, exceptionPolicy, delayPolicy);

        /// <summary>
        /// Creates a new <see cref="Reliable<#= optionalAsync #>Action<#= typeParametersComment #>"/>
        /// that executes the given <see cref="<#= tokenInputActionTypeComment #>"/>
        /// at most a specific number of times based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Reliable<#= optionalAsync #>Action<#= typeParametersCode #> Create<#= typeParametersCode #>(
            <#= tokenInputActionTypeCode #> action,
            int maxRetries,
            ExceptionPolicy exceptionPolicy,
            ComplexDelayPolicy delayPolicy)
            => new Reliable<#= optionalAsync #>Action<#= typeParametersCode #>(action, maxRetries, exceptionPolicy, delayPolicy);
    }
}
<#
        string fileName = parameterCount == 0 ? $"Reliable{optionalAsync}Action.Create.cs" : $"Reliable{optionalAsync}Action.Create.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
