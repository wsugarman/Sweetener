<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxReliabilityTypeArguments; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments (parameterCount);
        string parameters     = GetParameters(parameterCount);

        string typeParameters        = GetActionTypeParameters(parameterCount);
        string typeParametersCode    = Enclose(typeParameters, BracketType.AngleBrackets);
        string typeParametersComment = Enclose(typeParameters, BracketType.CurlyBraces  );
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
<#
        if (async)
        {
#>
using System.Threading.Tasks;
<#
        }
#>

namespace Sweetener.Reliability
{
    partial class Reliable<#= optionalAsync #>Action
    {
<#
        foreach (bool interruptable in new bool[] { false, true })
        {
            string inputActionType = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable), BracketType.AngleBrackets);
#>
        /// <summary>
        /// Creates a new <see cref="Reliable<#= optionalAsync #>Action<#= typeParametersComment #>"/>
        /// that executes the given <#= async ? "asynchronous " : string.Empty #>action at most a specific number of times
        /// based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Reliable<#= optionalAsync #>Action<#= typeParametersCode #> Create<#= typeParametersCode #>(
            <#= inputActionType #> action,
            int              maxRetries,
            ExceptionHandler exceptionHandler,
            DelayHandler     delayHandler)
            => new Reliable<#= optionalAsync #>Action<#= typeParametersCode #>(action, maxRetries, exceptionHandler, delayHandler);

        /// <summary>
        /// Creates a new <see cref="Reliable<#= optionalAsync #>Action<#= typeParametersComment #>"/>
        /// that executes the given <#= async ? "asynchronous " : string.Empty #>action at most a specific number of times
        /// based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Reliable<#= optionalAsync #>Action<#= typeParametersCode #> Create<#= typeParametersCode #>(
            <#= inputActionType #> action,
            int                 maxRetries,
            ExceptionHandler    exceptionHandler,
            ComplexDelayHandler delayHandler)
            => new Reliable<#= optionalAsync #>Action<#= typeParametersCode #>(action, maxRetries, exceptionHandler, delayHandler);
<#
            if (!interruptable) // Are there more iterations
            {
#>

<#          }
        }
#>
    }
}
<#
        string fileName = parameterCount == 0 ? $"Reliable{optionalAsync}Action.Create.cs" : $"Reliable{optionalAsync}Action.Create.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
