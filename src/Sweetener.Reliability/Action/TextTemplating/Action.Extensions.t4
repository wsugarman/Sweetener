<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync          = async ? "Async"                  : string.Empty;
    string optionalAsyncKeyword   = async ? "async "                 : string.Empty;
    string optionalAwait          = async ? "await "                 : string.Empty;
    string optionalConfigureAwait = async ? ".ConfigureAwait(false)" : string.Empty;
    string result                 = async ? "Task"                   : "void";

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments     (parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ">" : string.Empty;
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke <#= async ? "asynchronous " : string.Empty #>actions.
    /// </summary>
    public static partial class <#= optionalAsync #>ActionExtensions
<#
        }
        else
        {
#>
    static partial class <#= optionalAsync #>ActionExtensions
<#
        }
#>
    {
        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Interruptable<#= optionalAsync #>Action<#= typeParameters #> WithRetry<#= optionalAsync #><#= typeParameters #>(this <#= optionalAsync #>Action<#= typeParameters #> action, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            => WithRetry<#= optionalAsync #>(action, maxRetries, exceptionPolicy, delayPolicy != null ? (i, e) => delayPolicy(i) : (ComplexDelayPolicy)null);

        /// <summary>
        /// Creates a reliable wrapper around the given <paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
        PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static Interruptable<#= optionalAsync #>Action<#= typeParameters #> WithRetry<#= optionalAsync #><#= typeParameters #>(this <#= optionalAsync #>Action<#= typeParameters #> action, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy delayPolicy)
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (exceptionPolicy == null)
                throw new ArgumentNullException(nameof(exceptionPolicy));

            if (delayPolicy == null)
                throw new ArgumentNullException(nameof(delayPolicy));

            return <#= optionalAsyncKeyword #>(<#= arguments #><#= optionalComma #>cancellationToken) =>
            {
                int attempt = 0;

            Attempt:
                attempt++;
                try
                {
                    <#= optionalAwait #>action(<#= arguments #>)<#= optionalConfigureAwait #>;
                    return;
                }
                catch (Exception e)
                {
                    if (!exceptionPolicy(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    <#= optionalAwait #>Task.Delay(delayPolicy(attempt, e), cancellationToken)<#= async ? ".ConfigureAwait(false)" : ".Wait(cancellationToken)" #>;
                    goto Attempt;
                }
            };
        }
    }
}
<#
        string fileName = parameterCount == 0 ? $"{optionalAsync}Action.Extensions.cs" : $"{optionalAsync}Action.Extensions.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
