<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #><#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxReliabilityTypeArguments; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments(parameterCount);
        string typeParameters = Enclose(GetActionTypeParameters(parameterCount), BracketType.AngleBrackets);
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
<#
        if (parameterCount == 0)
        {
#>
    /// <summary>
    /// A collection of methods to reliablty invoke <#= async ? "asynchronous " : string.Empty #>user-defined actions.
    /// </summary>
    public static partial class <#= optionalAsync #>ActionExtensions
<#
        }
        else
        {
#>
    static partial class <#= optionalAsync #>ActionExtensions
<#
        }
#>
    {
<#
        foreach (bool interruptable in new bool[] { false, true })
        {
            string inputActionType           = (async ? "Func" : "Action") + Enclose(GetActionTypeParameters(parameterCount, async, interruptable), BracketType.AngleBrackets);
            string optionalCancellationCheck = interruptable ? (async ? "isCanceled" : "e.IsCancellation(cancellationToken)") + " || " : string.Empty;
            string asyncOperationSuffx       = async ? ".ConfigureAwait(false)" : ".Wait(" + (interruptable ? "cancellationToken" : string.Empty) + ")";
#>
        #region <#= inputActionType #>

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
            if (async)
            {
#>
        /// <remarks>
        /// The resulting action will throw <see cref="InvalidOperationException"/> if the given
        /// <paramref name="action"/> returns <see langword="null"/> instead of a valid <see cref="Task"/>.
        /// </remarks>
<#
            }
            PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);
#>
        public static <#= inputActionType #> With<#= optionalAsync #>Retry<#= typeParameters #>(this <#= inputActionType #> action, int maxRetries, ExceptionHandler exceptionHandler, DelayHandler delayHandler)
            => With<#= optionalAsync #>Retry(action, maxRetries, exceptionHandler, delayHandler.ToComplex());

        /// <summary>
        /// Creates a reliable wrapper around the given <#= async ? "asynchronous " : string.Empty #><paramref name="action" />
        /// that will retry the operation based on the provided policies.
        /// </summary>
<#
            if (async)
            {
#>
        /// <remarks>
        /// The resulting action will throw <see cref="InvalidOperationException"/> if the given
        /// <paramref name="action"/> returns <see langword="null"/> instead of a valid <see cref="Task"/>.
        /// </remarks>
<#
            }
            PrintReliableActionCtorXmlDoc(indent: 2, typeParameterCount: parameterCount, includeReturnsXmlDoc: true);

#>
        public static <#= inputActionType #> With<#= optionalAsync #>Retry<#= typeParameters #>(this <#= inputActionType #> action, int maxRetries, ExceptionHandler exceptionHandler, ComplexDelayHandler delayHandler)
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));

            if (maxRetries < Retries.Infinite)
                throw new ArgumentOutOfRangeException(nameof(maxRetries));

            if (exceptionHandler == null)
                throw new ArgumentNullException(nameof(exceptionHandler));

            if (delayHandler == null)
                throw new ArgumentNullException(nameof(delayHandler));

            return <#= async ? "async " : string.Empty #>(<#= arguments #><#= interruptable ? optionalComma + "cancellationToken" : string.Empty #>) =>
            {
                int attempt = 0;

            Attempt:
<#
            if (async)
            {
#>
                Task? t = null;
<#
            }
#>
                attempt++;

                try
                {
<#
            if (async)
            {
#>
                    t = action(<#= arguments #><#= interruptable ? optionalComma + "cancellationToken" : string.Empty #>);
                    if (t == null)
                        goto Invalid;

                    await t.ConfigureAwait(false);
<#
            }
            else
            {
#>
                    action(<#= arguments #><#= interruptable ? optionalComma + "cancellationToken" : string.Empty #>);
<#
            }
#>
                    return;
                }
                catch (Exception e)
                {
<#
        if (async && interruptable)
        {
#>
                    bool isCanceled = t != null ? t.IsCanceled : e.IsCancellation(cancellationToken);
<#
        }
#>
                    if (<#= optionalCancellationCheck #>!exceptionHandler(e) || (maxRetries != Retries.Infinite && attempt > maxRetries))
                        throw;

                    <#= async ? "await " : string.Empty #>Task.Delay(delayHandler(attempt, e)<#= interruptable ? ", cancellationToken" : string.Empty #>)<#= asyncOperationSuffx #>;
                    goto Attempt;
                }
<#
            if (async)
            {
#>

            Invalid:
                throw new InvalidOperationException(SR.InvalidTaskResult);
<#
            }
#>
            };
        }

        #endregion
<#
            if (!interruptable) // Are there more iterations?
            {
#>

<#          }
        }
#>
    }
}
<#
        string fileName = parameterCount == 0 ? $"{optionalAsync}Action.Extensions.cs" : $"{optionalAsync}Action.Extensions.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
