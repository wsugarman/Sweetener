<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\TextTemplating\Include.t4" #><#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments     (parameterCount);
        string parameters     = GetParameters    (parameterCount);
        string typeParameters = GetTypeParameters(parameterCount);
        string tokenPrefix    = parameterCount > 0 ? ", " : string.Empty;
    
        string typeParametersCode    = typeParameters == string.Empty ? string.Empty : "<" + typeParameters + ">";
        string typeParametersComment = typeParameters == string.Empty ? string.Empty : "{" + typeParameters + "}";
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;

namespace Sweetener.Reliability
{
    /// <summary>
    /// A wrapper to reliably invoke an action despite transient issues.
    /// </summary>
<#
        PrintTypeParamsXmlDoc(parameterCount, indent: 1, includeResult: false);
#>
    public sealed <#= parameterCount == 0 ? "partial " : "" #>class ReliableAction<#= typeParametersCode #> : ReliableDelegate
    {
        private readonly Action<#= typeParametersCode #> _action;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReliableAction<#= typeParametersComment #>"/>
        /// class that executes the given <see cref="Action<#= typeParametersComment #>"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintActionParamsXmlDoc(indent: 2);
#>
        public ReliableAction(Action<#= typeParametersCode #> action, int maxRetries, ExceptionPolicy exceptionPolicy, DelayPolicy delayPolicy)
            : base(maxRetries, exceptionPolicy, delayPolicy)
        {
            _action = action ?? throw new ArgumentNullException(nameof(action));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReliableAction<#= typeParametersComment #>"/>
        /// class that executes the given <see cref="Action<#= typeParametersComment #>"/> at most a
        /// specific number of times based on the provided policies.
        /// </summary>
<#
        PrintActionParamsXmlDoc(indent: 2);
#>
        public ReliableAction(Action<#= typeParametersCode #> action, int maxRetries, ExceptionPolicy exceptionPolicy, ComplexDelayPolicy delayPolicy)
            : base(maxRetries, exceptionPolicy, delayPolicy)
        {
            _action = action ?? throw new ArgumentNullException(nameof(action));
        }

        /// <summary>
        /// Invokes the underlying delegate and attempts to retry if it encounters transient exceptions.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        public void Invoke(<#= parameters #>)
            => Invoke(<#= arguments #><#= tokenPrefix #>CancellationToken.None);

        /// <summary>
        /// Invokes the underlying delegate and attempts to retry if it encounters transient exceptions.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">
        /// A cancellation token to observe while waiting for the operation to complete.
        /// </param>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public void Invoke(<#= parameters #><#= tokenPrefix #>CancellationToken cancellationToken)
        {
            int attempt = 0;
            Exception lastException;
            do
            {
                attempt++;
                try
                {
                    _action(<#= arguments #>);
                    return;
                }
                catch (Exception e)
                {
                    lastException = e;
                }
            } while (CanRetry(attempt, lastException, cancellationToken));

            throw lastException;
        }

        /// <summary>
        /// Attempts to successfully invoke the underlying delegate despite transient exceptions.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <returns>
        /// <see langword="true"/> if the delegate completed without throwing an exception
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        public bool TryInvoke(<#= parameters #>)
            => TryInvoke(<#= arguments #><#= tokenPrefix #>CancellationToken.None);

        /// <summary>
        /// Attempts to successfully invoke the underlying delegate despite transient exceptions.
        /// </summary>
<#
        PrintParamsXmlDoc(parameterCount, indent: 2);
#>
        /// <param name="cancellationToken">
        /// A cancellation token to observe while waiting for the operation to complete.
        /// </param>
        /// <returns>
        /// <see langword="true"/> if the delegate completed without throwing an exception
        /// within the maximum number of retries; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        public bool TryInvoke(<#= parameters #><#= tokenPrefix #>CancellationToken cancellationToken)
        {
            int attempt = 0;
            Exception lastException;
            do
            {
                attempt++;
                try
                {
                    _action(<#= arguments #>);
                    return true;
                }
                catch (Exception e)
                {
                    lastException = e;
                }
            } while (CanRetry(attempt, lastException, cancellationToken));

            return false;
        }

        /// <summary>
        /// Implicitly converts the <paramref name="reliableAction"/> to an
        /// <see cref="Action<#= typeParametersComment #>"/>.
        /// </summary>
        /// <remarks>
        /// The resulting action is equivalent to <see cref="Invoke(<#= typeParameters #>)"/>.
        /// </remarks>
        /// <param name="reliableAction">An operation that may be retried due to transient failures.</param>
        public static implicit operator Action<#= typeParametersCode #>(ReliableAction<#= typeParametersCode #> reliableAction)
            => reliableAction.Invoke;
    }
}
<#
        string fileName = parameterCount == 0 ? "ReliableAction.cs" : $"ReliableAction.T{parameterCount}.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
