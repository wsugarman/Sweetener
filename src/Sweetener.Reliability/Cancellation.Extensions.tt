<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
    internal static class InterruptableExtensions
    {
        public static bool IsCanceled(this Task task)
            => task != null && task.Status == TaskStatus.Canceled;

        public static bool IsCancellation(this Exception exception, CancellationToken cancellationToken)
        {
            OperationCanceledException oce = exception as OperationCanceledException;
            return oce != null
                && oce.CancellationToken == cancellationToken
                && cancellationToken.IsCancellationRequested;
        }

        #region Action

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments(parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ">" : string.Empty;
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
        public static InterruptableAction<#= typeParameters #> IgnoreInterruption<#= typeParameters #>(this Action<#= typeParameters #> action)
            => action == null ? (InterruptableAction<#= typeParameters #>)null : (<#= arguments #><#= optionalComma #>token) => action(<#= arguments #>);

<#
    }
#>
        #endregion

        #region AsyncAction

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments(parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ">" : string.Empty;
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
        public static InterruptableAsyncAction<#= typeParameters #> IgnoreInterruption<#= typeParameters #>(this AsyncAction<#= typeParameters #> action)
            => action == null ? (InterruptableAsyncAction<#= typeParameters #>)null : async (<#= arguments #><#= optionalComma #>token) => await action(<#= arguments #>).ConfigureAwait(false);

<#
    }
#>
        #endregion

        #region Func

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments(parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ", TResult>" : "<TResult>";
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
        public static InterruptableFunc<#= typeParameters #> IgnoreInterruption<#= typeParameters #>(this Func<#= typeParameters #> func)
            => func == null ? (InterruptableFunc<#= typeParameters #>)null : (<#= arguments #><#= optionalComma #>token) => func(<#= arguments #>);

<#
    }
#>
        #endregion

        #region AsyncFunc

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments      = GetArguments(parameterCount);
        string typeParameters = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ", TResult>" : "<TResult>";
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
#>
        public static InterruptableAsyncFunc<#= typeParameters #> IgnoreInterruption<#= typeParameters #>(this AsyncFunc<#= typeParameters #> func)
            => func == null ? (InterruptableAsyncFunc<#= typeParameters #>)null : async (<#= arguments #><#= optionalComma #>token) => await func(<#= arguments #>).ConfigureAwait(false);

<#
    }
#>
        #endregion
    }
}
