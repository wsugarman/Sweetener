<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sweetener.Reliability
{
    internal static class InterruptableExtensions
    {
        public static bool IsCanceled(this Task task)
            => task != null && task.Status == TaskStatus.Canceled;

        public static bool IsCancellation(this Exception exception, CancellationToken cancellationToken)
        {
            OperationCanceledException oce = exception as OperationCanceledException;
            return oce != null
                && oce.CancellationToken == cancellationToken
                && cancellationToken.IsCancellationRequested;
        }

        #region Action

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma        = parameterCount > 0 ? ", " : string.Empty;
        string arguments            = GetArguments(parameterCount);
        string inputTypeParameters  = Enclose(GetActionTypeParameters(parameterCount                     ), BracketType.AngleBrackets);
        string outputTypeParameters = Enclose(GetActionTypeParameters(parameterCount, interruptable: true), BracketType.AngleBrackets);
#>
        public static Action<#= outputTypeParameters #> IgnoreInterruption<#= inputTypeParameters #>(this Action<#= inputTypeParameters #> action)
            => action == null ? (Action<#= outputTypeParameters #>)null : (<#= arguments #><#= optionalComma #>token) => action(<#= arguments #>);

<#
    }
#>
        #endregion

        #region Func

<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma        = parameterCount > 0 ? ", " : string.Empty;
        string arguments            = GetArguments(parameterCount);
        string inputTypeParameters  = Enclose(GetFuncTypeParameters(parameterCount                     ), BracketType.AngleBrackets);
        string outputTypeParameters = Enclose(GetFuncTypeParameters(parameterCount, interruptable: true), BracketType.AngleBrackets);
#>
        public static Func<#= outputTypeParameters #> IgnoreInterruption<#= inputTypeParameters #>(this Func<#= inputTypeParameters #> func)
            => func == null ? (Func<#= outputTypeParameters #>)null : (<#= arguments #><#= optionalComma #>token) => func(<#= arguments #>);

<#
    }
#>
        #endregion
    }
}
