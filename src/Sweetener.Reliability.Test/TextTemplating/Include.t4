<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="$(SrcDirectory)Sweetener.Reliability\TextTemplating\Include.t4" #><#+
    static string[] typeArgs = new string[]
    {
        "int",
        "string",
        "double",
        "long",
        "ushort",
        "byte",
        "TimeSpan",
        "uint",
        "Tuple<bool, ulong>",
        "DateTime",
        "ulong",
        "sbyte",
        "decimal",
        "char",
        "float",
        "Guid",
    };

    static string[] args = new string[]
    {
        "42",
        "\"foo\"",
        "3.14D",
        "1000L",
        "(ushort)1",
        "(byte)255",
        "TimeSpan.FromDays(30)",
        "112U",
        "Tuple.Create(true, 64UL)",
        "new DateTime(2019, 10, 06)",
        "321UL",
        "(sbyte)-7",
        "-24.68M",
        "'!'",
        "0.1F",
        "Guid.Parse(\"53710ff0-eaa3-4fac-a068-e5be641d446b\")",
    };

    public string GetArgumentValues(int count)
        => string.Join(", ", args.Take(count));

    public string GetTypeArguments(int count, bool async = false, bool interruptable = false, string outputType = null)
    {
        List<string> additionalElements = new List<string>();
        if (interruptable)
            additionalElements.Add("CancellationToken");

        if (outputType != null)
            additionalElements.Add(async ? $"Task<{outputType}>" : outputType);
        else if (async)
            additionalElements.Add("Task");

        return string.Join(", ", typeArgs.Take(count).Concat(additionalElements));
    }

    public string GetDelegate(int argCount, string delegateName, bool async, bool interruptable = false)
    {
        string args          = GetArguments(argCount);
        string optionalComma = argCount > 0 ? ", " : string.Empty;
        string optionalToken = interruptable ? optionalComma + "token" : string.Empty;

        if (!async)
            return $"({args}{optionalToken}) => {delegateName}()";

        return $"async ({args}{optionalToken}) => await Task.Run({delegateName}).ConfigureAwait(false)";
    }

    public string GetThrowException<T>(int argCount, bool async, bool interruptable = false)
        where T : Exception
    {
        string args          = GetArguments(argCount);
        string optionalComma = argCount > 0 ? ", " : string.Empty;
        string optionalToken = interruptable ? optionalComma + "token" : string.Empty;

        if (!async)
            return $"({args}{optionalToken}) => throw new {typeof(T).Name}()";

        return $"async ({args}{optionalToken}) => await Task.Run(() => throw new {typeof(T).Name}()).ConfigureAwait(false)";
    }

    public string GetNoOpDelegate(int argCount, bool async, bool interruptable = false)
    {
        string args          = GetArguments(argCount);
        string optionalComma = argCount > 0 ? ", " : string.Empty;
        string optionalToken = interruptable ? optionalComma + "token" : string.Empty;

        if (!async)
            return $"({args}{optionalToken}) => Operation.Null()";

        return $"async ({args}{optionalToken}) => await Operation.NullAsync().ConfigureAwait(false)";
    }
#>
