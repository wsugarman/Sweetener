<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;
<#
    if (async)
    {
#>
using System.Threading.Tasks;
<#
    }
#>

namespace Sweetener.Reliability.Test
{
<#
    // Assume a boolean variable called "async" has been previously defined!
    string optionalAsync = async ? "Async" : string.Empty;

    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters + 1; parameterCount++)
    {
        string optionalComma      = parameterCount > 0 ? ", " : string.Empty;
        string arguments          = GetArguments     (parameterCount);
        string parameters         = GetParameters    (parameterCount);
        string typeParameters     = GetTypeParameters(parameterCount);
        string typeParametersCode = parameterCount > 0 ? "<" + GetTypeParameters(parameterCount) + ">" : string.Empty;
#>
    #region <#= optionalAsync #>ActionProxy<#= typeParametersCode #>

    internal sealed class <#= optionalAsync #>ActionProxy<#= typeParametersCode #> : DelegateProxy
    {
        public event Action<<#= typeParameters #><#= optionalComma #>CallContext> Invoking;

        private readonly <#= optionalAsync #>Action<#= typeParametersCode #> _action;

        public <#= optionalAsync #>ActionProxy()
            : this((<#= arguments #>) => Operation.Null<#= optionalAsync #>())
        { }

        public <#= optionalAsync #>ActionProxy(<#= optionalAsync #>Action<#= typeParametersCode #> action)
        {
            _action = action ?? throw new ArgumentNullException(nameof(action));
        }

        public <#= async ? "async Task" : "void" #> Invoke<#= optionalAsync #>(<#= parameters #>)
        {
            UpdateContext();

            Invoking?.Invoke(<#= arguments #><#= optionalComma #>_context);
            <#= async ? "await " : string.Empty #>_action(<#= arguments #>)<#= async ? ".ConfigureAwait(false)" : string.Empty #>;
        }
    }

    #endregion

<#
    }
#>
}
