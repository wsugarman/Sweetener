<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\..\Sweetener.Reliability\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;

namespace Sweetener.Reliability.Test
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string optionalComma          = parameterCount > 0 ? ", " : string.Empty;
        string arguments              = GetArguments     (parameterCount);
        string parameters             = GetParameters    (parameterCount);
        string typeParametersNoResult = GetTypeParameters(parameterCount);
        string typeParameters         = typeParametersNoResult + optionalComma + "TResult";
#>
    #region FuncProxy<<#= typeParameters #>>

    internal sealed class FuncProxy<<#= typeParameters #>> : DelegateProxy
    {
        public event Action<<#= typeParametersNoResult #><#= optionalComma #>CallContext> Invoking;

        private readonly Func<<#= typeParameters #>> _func;

        public FuncProxy()
            : this((<#= arguments #>) => default)
        { }

        public FuncProxy(Func<<#= typeParameters #>> func)
        {
            _func = func ?? throw new ArgumentNullException(nameof(func));
        }

        public TResult Invoke(<#= parameters #>)
        {
            UpdateContext();

            Invoking?.Invoke(<#= arguments #><#= optionalComma #>_context);
            return _func(<#= arguments #>);
        }
    }

    #endregion

<#
    }
#>
}
