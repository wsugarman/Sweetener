<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;

namespace Sweetener.Reliability.Test
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters + 1; parameterCount++)
    {
        string optionalComma  = parameterCount > 0 ? ", " : string.Empty;
        string arguments      = GetArguments         (parameterCount);
        string parameters     = GetParameters        (parameterCount);
        string typeParameters = GetFuncTypeParameters(parameterCount);
#>
    #region FuncProxy<<#= typeParameters #>>

    internal sealed class FuncProxy<<#= typeParameters #>> : DelegateProxy<Func<<#= typeParameters #>>>
    {
        public new event Action<<#= GetActionTypeParameters(parameterCount) #><#= optionalComma #>CallContext>? Invoking;

        public override Func<<#= typeParameters #>> Proxy => Invoke;

        public FuncProxy(Func<<#= typeParameters #>> func)
            : base(func)
        { }

        public TResult Invoke(<#= parameters #>)
        {
            UpdateContext();

            OnInvoking(<#= arguments #>);
            return _delegate(<#= arguments #>);
        }

        private <#= parameterCount == 0 ? "new " : string.Empty #>void OnInvoking(<#= parameters #>)
        {
            Invoking?.Invoke(<#= arguments #><#= optionalComma #>_context);
            <#= parameterCount == 0 ? "base." : string.Empty #>OnInvoking();
        }
    }

    #endregion

<#
    }
#>
}
