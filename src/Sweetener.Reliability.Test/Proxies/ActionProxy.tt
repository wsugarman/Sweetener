<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="$(MSBuildProjectDirectory)\TextTemplating\Include.t4" #>// Generated from <#= GetTemplateFileName() #>
using System;

namespace Sweetener.Reliability.Test
{
<#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters + 1; parameterCount++)
    {
        string optionalComma      = parameterCount > 0 ? ", " : string.Empty;
        string arguments          = GetArguments           (parameterCount);
        string parameters         = GetParameters          (parameterCount);
        string typeParameters     = GetActionTypeParameters(parameterCount);
        string typeParametersCode = Enclose(typeParameters, BracketType.AngleBrackets);
#>
    #region ActionProxy<#= typeParametersCode #>

    internal sealed class ActionProxy<#= typeParametersCode #> : DelegateProxy<Action<#= typeParametersCode #>>
    {
        public new event Action<<#= typeParameters #><#= optionalComma #>CallContext> Invoking;

        public override Action<#= typeParametersCode #> Proxy => Invoke;

        public ActionProxy()
            : this((<#= arguments #>) => Operation.Null())
        { }

        public ActionProxy(Action<#= typeParametersCode #> action)
            : base(action)
        { }

        public void Invoke(<#= parameters #>)
        {
            UpdateContext();

            OnInvoking(<#= arguments #>);
            _delegate(<#= arguments #>);
        }

        private <#= parameterCount == 0 ? "new " : string.Empty #>void OnInvoking(<#= parameters #>)
        {
            Invoking?.Invoke(<#= arguments #><#= optionalComma #>_context);
            <#= parameterCount == 0 ? "base." : string.Empty #>OnInvoking();
        }
    }

    #endregion

<#
    }
#>
}
