<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".tt.out" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ include file="..\..\Sweetener.Reliability\TextTemplating\Include.t4" #><#@ include file="..\TextTemplating\Include.t4" #><#
    for (int parameterCount = 0; parameterCount <= MaxDelegateParameters; parameterCount++)
    {
        string arguments              = GetArguments (parameterCount);
        string parameters             = GetParameters(typeArgs, parameterCount);
        string typeArguments          = GetTypeArgs  (parameterCount);
        string typeArgumentsNoBracket = GetTypeArgs  (parameterCount, includeBrackets: false);
        string typeParameters         = parameterCount == 0 ? string.Empty : "<" + GetTypeParameters(parameterCount) + ">";
        string testArguments          = GetTestArguments(parameterCount);
        string optionalComma          = parameterCount > 0 ? ", " : string.Empty;
        string suffix                 = parameterCount == 0 ? string.Empty : "T" + parameterCount;
#>
// Generated from <#= GetTemplateFileName() #>
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Sweetener.Reliability.Test
{
<#
        if (parameterCount == 0)
        {
#>
    [TestClass]
    public partial class ActionExtensionsTest
<#
        }
        else
        {
#>
    partial class ActionExtensionsTest
<#
        }
#>
    {
        [TestMethod]
        public void WithRetry<#= suffix #>_DelayPolicy()
        {
            Action<#= typeArguments #> nullAction = null;
            Action<#= typeArguments #> action     = (<#= arguments #>) => Operation.Null();
            Assert.ThrowsException<ArgumentNullException      >(() => nullAction.WithRetry( 4, ExceptionPolicies.Transient, DelayPolicies.None));
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => action    .WithRetry(-2, ExceptionPolicies.Transient, DelayPolicies.None));
            Assert.ThrowsException<ArgumentNullException      >(() => action    .WithRetry( 4, null                       , DelayPolicies.None));
            Assert.ThrowsException<ArgumentNullException      >(() => action    .WithRetry( 4, ExceptionPolicies.Transient, (DelayPolicy)null ));

            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke;
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry = (a, r, e, d) => a.WithRetry(r, e, d);

            // Without Token
            invoke = (action<#= optionalComma #><#= arguments #>, token) => action(<#= arguments #>);

            WithRetry<#= suffix #>_Success         (withRetry, invoke);
            WithRetry<#= suffix #>_Failure         (withRetry, invoke);
            WithRetry<#= suffix #>_EventualSuccess (withRetry, invoke);
            WithRetry<#= suffix #>_EventualFailure (withRetry, invoke);
            WithRetry<#= suffix #>_RetriesExhausted(withRetry, invoke);

            // With Token
            invoke = (action<#= optionalComma #><#= arguments #>, token) => action(<#= arguments #><#= optionalComma #>token);

            WithRetry<#= suffix #>_Success         (withRetry, invoke);
            WithRetry<#= suffix #>_Failure         (withRetry, invoke);
            WithRetry<#= suffix #>_EventualSuccess (withRetry, invoke);
            WithRetry<#= suffix #>_EventualFailure (withRetry, invoke);
            WithRetry<#= suffix #>_RetriesExhausted(withRetry, invoke);
            WithRetry<#= suffix #>_Canceled        (withRetry);
        }

        [TestMethod]
        public void WithRetry<#= suffix #>_ComplexDelayPolicy()
        {
            Action<#= typeArguments #> nullAction = null;
            Action<#= typeArguments #> action     = (<#= arguments #>) => Operation.Null();
            Assert.ThrowsException<ArgumentNullException      >(() => nullAction.WithRetry( 4, ExceptionPolicies.Transient, (i, e) => TimeSpan.Zero ));
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => action    .WithRetry(-2, ExceptionPolicies.Transient, (i, e) => TimeSpan.Zero ));
            Assert.ThrowsException<ArgumentNullException      >(() => action    .WithRetry( 4, null                       , (i, e) => TimeSpan.Zero ));
            Assert.ThrowsException<ArgumentNullException      >(() => action    .WithRetry( 4, ExceptionPolicies.Transient, (ComplexDelayPolicy)null));

            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke;
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry = (a, r, e, d) => a.WithRetry(r, e, d);

            // Without Token
            invoke = (action<#= optionalComma #><#= arguments #>, token) => action(<#= arguments #>);

            WithRetry<#= suffix #>_Success         (withRetry, invoke);
            WithRetry<#= suffix #>_Failure         (withRetry, invoke);
            WithRetry<#= suffix #>_EventualSuccess (withRetry, invoke);
            WithRetry<#= suffix #>_EventualFailure (withRetry, invoke);
            WithRetry<#= suffix #>_RetriesExhausted(withRetry, invoke);

            // With Token
            invoke = (action<#= optionalComma #><#= arguments #>, token) => action(<#= arguments #><#= optionalComma #>token);

            WithRetry<#= suffix #>_Success         (withRetry, invoke);
            WithRetry<#= suffix #>_Failure         (withRetry, invoke);
            WithRetry<#= suffix #>_EventualSuccess (withRetry, invoke);
            WithRetry<#= suffix #>_EventualFailure (withRetry, invoke);
            WithRetry<#= suffix #>_RetriesExhausted(withRetry, invoke);
            WithRetry<#= suffix #>_Canceled        (withRetry);
        }

        private void WithRetry<#= suffix #>_Success(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_Success(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, TimeSpan> delayPolicy = new FuncProxy<int, TimeSpan>();
                    delayPolicy.Invoking += Expect.Nothing<int>();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_Success(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_Success(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, Exception, TimeSpan> delayPolicy = new FuncProxy<int, Exception, TimeSpan>();
                    delayPolicy.Invoking += Expect.Nothing<int, Exception>();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_Success<T>(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, T, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke,
            Func<T> delayPolicyFactory)
            where T : DelegateProxy
        {
            // Create a "successful" user-defined action
            ActionProxy<#= typeArguments #> action = new ActionProxy<#= typeArguments #>((<#= arguments #>) => Operation.Null());

            // Declare the various policy and event handler proxies
            FuncProxy<Exception, bool> exceptionPolicy = new FuncProxy<Exception, bool>();
            T delayPolicy = delayPolicyFactory();

            // Create the reliable InterruptableAction
            InterruptableAction<#= typeArguments #> reliableAction = withRetry(
                action.Invoke,
                Retries.Infinite,
                exceptionPolicy.Invoke,
                delayPolicy);

            // Define expectations
<#
        if (parameterCount > 0)
        {
#>
            action         .Invoking += Expect.Arguments<#= typeArguments #>(Arguments.Validate);
<#
        }
#>
            exceptionPolicy.Invoking += Expect.Nothing<Exception>();

            // Invoke
            using (CancellationTokenSource tokenSource = new CancellationTokenSource())
                invoke(reliableAction<#= optionalComma #><#= testArguments #>, tokenSource.Token);

            // Validate the number of calls
            Assert.AreEqual(1, action         .Calls);
            Assert.AreEqual(0, exceptionPolicy.Calls);
            Assert.AreEqual(0, delayPolicy    .Calls);
        }

        private void WithRetry<#= suffix #>_Failure(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_Failure(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, TimeSpan> delayPolicy = new FuncProxy<int, TimeSpan>();
                    delayPolicy.Invoking += Expect.Nothing<int>();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_Failure(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_Failure(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, Exception, TimeSpan> delayPolicy = new FuncProxy<int, Exception, TimeSpan>();
                    delayPolicy.Invoking += Expect.Nothing<int, Exception>();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_Failure<T>(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, T, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke,
            Func<T> delayPolicyFactory)
            where T : DelegateProxy
        {
            // Create an "unsuccessful" user-defined action
            ActionProxy<#= typeArguments #> action = new ActionProxy<#= typeArguments #>((<#= arguments #>) => throw new InvalidOperationException());

            // Declare the various policy and event handler proxies
            FuncProxy<Exception, bool> exceptionPolicy = new FuncProxy<Exception, bool>(ExceptionPolicies.Fail<InvalidOperationException>().Invoke);
            T delayPolicy = delayPolicyFactory();

            // Create the reliable InterruptableAction
            InterruptableAction<#= typeArguments #> reliableAction = withRetry(
                action.Invoke,
                Retries.Infinite,
                exceptionPolicy.Invoke,
                delayPolicy);

            // Define expectations
<#
        if (parameterCount > 0)
        {
#>
            action         .Invoking += Expect.Arguments<#= typeArguments #>(Arguments.Validate);
<#
        }
#>
            exceptionPolicy.Invoking += Expect.Exception(typeof(InvalidOperationException));

            // Invoke
            using (CancellationTokenSource tokenSource = new CancellationTokenSource())
                Assert.That.ThrowsException<InvalidOperationException>(() => invoke(reliableAction<#= optionalComma #><#= testArguments #>, tokenSource.Token));

            // Validate the number of calls
            Assert.AreEqual(1, action         .Calls);
            Assert.AreEqual(1, exceptionPolicy.Calls);
            Assert.AreEqual(0, delayPolicy    .Calls);
        }

        private void WithRetry<#= suffix #>_EventualSuccess(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_EventualSuccess(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, TimeSpan> delayPolicy = new FuncProxy<int, TimeSpan>(i => Constants.Delay);
                    delayPolicy.Invoking += Expect.Asc();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_EventualSuccess(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_EventualSuccess(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, Exception, TimeSpan> delayPolicy = new FuncProxy<int, Exception, TimeSpan>((i, e) => Constants.Delay);
                    delayPolicy.Invoking += Expect.ExceptionAsc(typeof(IOException));
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_EventualSuccess<T>(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, T, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke,
            Func<T> delayPolicyFactory)
            where T : DelegateProxy
        {
            // Create a "successful" user-defined action that completes after 1 IOException
            Action flakyAction = FlakyAction.Create<IOException>(1);
            ActionProxy<#= typeArguments #> action = new ActionProxy<#= typeArguments #>((<#= arguments #>) => flakyAction());

            // Declare the various policy and event handler proxies
            FuncProxy<Exception, bool> exceptionPolicy = new FuncProxy<Exception, bool>(ExceptionPolicies.Retry<IOException>().Invoke);
            T delayPolicy = delayPolicyFactory();

            // Create the reliable InterruptableAction
            InterruptableAction<#= typeArguments #> reliableAction = withRetry(
                action.Invoke,
                Retries.Infinite,
                exceptionPolicy.Invoke,
                delayPolicy);

            // Define expectations
<#
        if (parameterCount > 0)
        {
#>
            action         .Invoking += Expect.ArgumentsAfterDelay<#= typeArguments #>(Arguments.Validate, Constants.MinDelay);
<#
        }
        else
        {
#>
            action         .Invoking += Expect.AfterDelay<#= typeArguments #>(Constants.MinDelay);
<#
        }
#>
            exceptionPolicy.Invoking += Expect.Exception(typeof(IOException));

            // Invoke
            using (CancellationTokenSource tokenSource = new CancellationTokenSource())
                invoke(reliableAction<#= optionalComma #><#= testArguments #>, tokenSource.Token);

            // Validate the number of calls
            Assert.AreEqual(2, action         .Calls);
            Assert.AreEqual(1, exceptionPolicy.Calls);
            Assert.AreEqual(1, delayPolicy    .Calls);
        }

        private void WithRetry<#= suffix #>_EventualFailure(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_EventualFailure(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, TimeSpan> delayPolicy = new FuncProxy<int, TimeSpan>(i => Constants.Delay);
                    delayPolicy.Invoking += Expect.Asc();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_EventualFailure(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_EventualFailure(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, Exception, TimeSpan> delayPolicy = new FuncProxy<int, Exception, TimeSpan>((i, e) => Constants.Delay);
                    delayPolicy.Invoking += Expect.ExceptionAsc(typeof(IOException));
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_EventualFailure<T>(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, T, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke,
            Func<T> delayPolicyFactory)
            where T : DelegateProxy
        {
            // Create an "unsuccessful" user-defined action that fails after 2 transient exceptions
            Action flakyAction = FlakyAction.Create<IOException, InvalidOperationException>(2);
            ActionProxy<#= typeArguments #> action = new ActionProxy<#= typeArguments #>((<#= arguments #>) => flakyAction());

            // Declare the various policy and event handler proxies
            FuncProxy<Exception, bool> exceptionPolicy = new FuncProxy<Exception, bool>(ExceptionPolicies.Retry<IOException>().Invoke);
            T delayPolicy = delayPolicyFactory();

            // Create the reliable InterruptableAction
            InterruptableAction<#= typeArguments #> reliableAction = withRetry(
                action.Invoke,
                Retries.Infinite,
                exceptionPolicy.Invoke,
                delayPolicy);

            // Define expectations
<#
        if (parameterCount > 0)
        {
#>
            action         .Invoking += Expect.ArgumentsAfterDelay<#= typeArguments #>(Arguments.Validate, Constants.MinDelay);
<#
        }
        else
        {
#>
            action         .Invoking += Expect.AfterDelay<#= typeArguments #>(Constants.MinDelay);
<#
        }
#>
            exceptionPolicy.Invoking += Expect.Exceptions(typeof(IOException), typeof(InvalidOperationException), 2);

            // Invoke
            using (CancellationTokenSource tokenSource = new CancellationTokenSource())
                Assert.That.ThrowsException<InvalidOperationException>(() => invoke(reliableAction<#= optionalComma #><#= testArguments #>, tokenSource.Token));

            // Validate the number of calls
            Assert.AreEqual(3, action          .Calls);
            Assert.AreEqual(3, exceptionPolicy .Calls);
            Assert.AreEqual(2, delayPolicy     .Calls);
        }

        private void WithRetry<#= suffix #>_RetriesExhausted(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_RetriesExhausted(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, TimeSpan> delayPolicy = new FuncProxy<int, TimeSpan>(i => Constants.Delay);
                    delayPolicy.Invoking += Expect.Asc();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_RetriesExhausted(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke)
            => WithRetry<#= suffix #>_RetriesExhausted(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                invoke,
                () =>
                {
                    FuncProxy<int, Exception, TimeSpan> delayPolicy = new FuncProxy<int, Exception, TimeSpan>((i, e) => Constants.Delay);
                    delayPolicy.Invoking += Expect.ExceptionAsc(typeof(IOException));
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_RetriesExhausted<T>(
            Func<Action<#= typeArguments #>, int, ExceptionPolicy, T, InterruptableAction<#= typeArguments #>> withRetry,
            Action<InterruptableAction<#= typeArguments #><#= optionalComma #><#= typeArgumentsNoBracket #>, CancellationToken> invoke,
            Func<T> delayPolicyFactory)
            where T : DelegateProxy
        {
            // Create an "unsuccessful" user-defined action that exhausts the configured number of retries
            ActionProxy<#= typeArguments #> action = new ActionProxy<#= typeArguments #>((<#= arguments #>) => throw new IOException());

            // Declare the various policy and event handler proxies
            FuncProxy<Exception, bool> exceptionPolicy = new FuncProxy<Exception, bool>(ExceptionPolicies.Retry<IOException>().Invoke);
            T delayPolicy = delayPolicyFactory();

            // Create the reliable InterruptableAction
            InterruptableAction<#= typeArguments #> reliableAction = withRetry(
                action.Invoke,
                2,
                exceptionPolicy.Invoke,
                delayPolicy);

            // Define expectations
<#
        if (parameterCount > 0)
        {
#>
            action         .Invoking += Expect.ArgumentsAfterDelay<#= typeArguments #>(Arguments.Validate, Constants.MinDelay);
<#
        }
        else
        {
#>
            action         .Invoking += Expect.AfterDelay<#= typeArguments #>(Constants.MinDelay);
<#
        }
#>
            exceptionPolicy.Invoking += Expect.Exception(typeof(IOException));

            // Invoke
            using (CancellationTokenSource tokenSource = new CancellationTokenSource())
                Assert.That.ThrowsException<IOException>(() => invoke(reliableAction<#= optionalComma #><#= testArguments #>, tokenSource.Token));

            // Validate the number of calls
            Assert.AreEqual(3, action          .Calls);
            Assert.AreEqual(3, exceptionPolicy .Calls);
            Assert.AreEqual(2, delayPolicy     .Calls);
        }

        private void WithRetry<#= suffix #>_Canceled(Func<Action<#= typeArguments #>, int, ExceptionPolicy, DelayPolicy, InterruptableAction<#= typeArguments #>> withRetry)
            => WithRetry<#= suffix #>_Canceled(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                () =>
                {
                    FuncProxy<int, TimeSpan> delayPolicy = new FuncProxy<int, TimeSpan>(i => Constants.Delay);
                    delayPolicy.Invoking += Expect.Asc();
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_Canceled(Func<Action<#= typeArguments #>, int, ExceptionPolicy, ComplexDelayPolicy, InterruptableAction<#= typeArguments #>> withRetry)
            => WithRetry<#= suffix #>_Canceled(
                (a, r, e, d) => withRetry(a, r, e, d.Invoke),
                () =>
                {
                    FuncProxy<int, Exception, TimeSpan> delayPolicy = new FuncProxy<int, Exception, TimeSpan>((i, e) => Constants.Delay);
                    delayPolicy.Invoking += Expect.ExceptionAsc(typeof(IOException));
                    return delayPolicy;
                });

        private void WithRetry<#= suffix #>_Canceled<T>(Func<Action<#= typeArguments #>, int, ExceptionPolicy, T, InterruptableAction<#= typeArguments #>> withRetry, Func<T> delayPolicyFactory)
            where T : DelegateProxy
        {
            using ManualResetEvent        cancellationTrigger = new ManualResetEvent(false);
            using CancellationTokenSource tokenSource         = new CancellationTokenSource();

            // Create an "unsuccessful" user-defined action that continues to fail with transient exceptions until it's canceled
            ActionProxy<#= typeArguments #> action = new ActionProxy<#= typeArguments #>((<#= arguments #>) => throw new IOException());

            // Declare the various policy and event handler proxies
            FuncProxy<Exception, bool> exceptionPolicy = new FuncProxy<Exception, bool>(ExceptionPolicies.Retry<IOException>().Invoke);
            T delayPolicy = delayPolicyFactory();

            // Create the reliable InterruptableAction
            InterruptableAction<#= typeArguments #> reliableAction = withRetry(
                action.Invoke,
                Retries.Infinite,
                exceptionPolicy.Invoke,
                delayPolicy);

            // Define expectations
<#
        if (parameterCount > 0)
        {
#>
            action         .Invoking += Expect.ArgumentsAfterDelay<#= typeArguments #>(Arguments.Validate, Constants.MinDelay);
<#
        }
        else
        {
#>
            action         .Invoking += Expect.AfterDelay<#= typeArguments #>(Constants.MinDelay);
<#
        }
#>
            exceptionPolicy.Invoking += Expect.Exception(typeof(IOException));

            // Trigger the event upon retry
            exceptionPolicy.Invoking += (e, c) =>
            {
                if (c.Calls > 1)
                    cancellationTrigger.Set();
            };

            // Create a task whose job is to cancel the invocation after at least 1 retry
            Task cancellationTask = Task.Factory.StartNew((state) =>
            {
                (ManualResetEvent e, CancellationTokenSource s) = ((ManualResetEvent, CancellationTokenSource))state;
                e.WaitOne();
                s.Cancel();

            }, (cancellationTrigger, tokenSource));

            // Begin the invocation
            Assert.That.ThrowsException<OperationCanceledException>(() => reliableAction(<#= testArguments #><#= optionalComma #>tokenSource.Token));

            // Validate the number of calls
            int calls = action.Calls;
            Assert.IsTrue(calls > 1);

            Assert.AreEqual(calls, action          .Calls);
            Assert.AreEqual(calls, exceptionPolicy .Calls);
            Assert.AreEqual(calls, delayPolicy     .Calls);
        }
    }
}
<#
        string fileName = parameterCount == 0 ? "Action.Extensions.Test.cs" : $"Action.Extensions.T{parameterCount}.Test.cs";
        SaveOutput(fileName);
    }
#>
<#= GetTemplateFileName() #> ran successfully
