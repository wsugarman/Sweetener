parameters:
  project: ''
  netfxTools: 'C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.8 Tools'

jobs:
- job: Validation

  pool:
    vmImage: 'ubuntu-latest'

  variables:
    disable.coverage.autogenerate: 'true'

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core 3.x'
    inputs:
      packageType: 'sdk'
      version: '3.x'

  # Enable "-p:ContinuousIntegrationBuild=true" after tonerdo/coverlet#363 is fixed
  - task: DotNetCoreCLI@2
    displayName: 'Run Tests and Collect Code Coverage'
    inputs:
      command: 'test'
      projects: 'src/${{ parameters.Project }}.Test/${{ parameters.Project }}.Test.csproj'
      arguments: '-c Debug --collect "XPlat Code Coverage" -s "$(Build.Repository.LocalPath)/src/CodeCoverage.runsettings" -v normal'

  # Use PublishCodeCoverageResults Task only after ReportGenerator >= 4.4.2 is used internally
  - task: ReportGenerator@4
    displayName: 'Generate Code Coverage HTML Report'
    inputs:
      reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      targetdir: 'report'
      reporttypes: 'HtmlInline_AzurePipelines'
      tag: ''

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Report'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      reportDirectory: 'report'
      failIfCoverageEmpty: true

- job: Build

  pool:
    vmImage: 'windows-latest'

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core 3.x'
    inputs:
      packageType: 'sdk'
      version: '3.x'

  - task: DotNetCoreCLI@2
    displayName: 'Build Library'
    inputs:
      command: 'build'
      projects: 'src/${{ parameters.Project }}/${{ parameters.Project }}.csproj'
      arguments: '-c Release -p:ContinuousIntegrationBuild=true'
      nugetConfigPath: 'NuGet.config'

  - task: DownloadSecureFile@1
    name: SigningKey
    displayName: 'Download Signing Key'
    inputs:
      secureFile: 'Sweetener.snk'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - task: PowerShell@2
    displayName: 'Sign Library with an Enhanced Strong Name'
    inputs:
      targetType: 'inline'
      script: |
        $assemblies = @(Get-ChildItem -Path "src/${{ parameters.Project }}/bin/$(BuildConfiguration)/" -Recurse -Include ${{ parameters.Project }}.dll)
        foreach ($assembly in $assemblies)
        {
            Start-Process -FilePath "${{ parameters.netfxTools }}/sn.exe" -ArgumentList "-Ra","$assembly","$(SigningKey.SecureFilePath)" -NoNewWindow -Wait
        }
      pwsh: true
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - task: DotNetCoreCLI@2
    displayName: 'Pack Library'
    inputs:
      command: 'pack'
      packagesToPack: 'src/${{ parameters.Project }}/${{ parameters.Project }}.csproj'
      nobuild: true
      nugetConfigPath: 'NuGet.config'
      verbosityPack: 'normal'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts'
    inputs:
      artifactName: 'pkg'
