# Note: Only the CI pipelines have sufficient permissions for signing assemblies and packages
parameters:
- name: project
  type: string
  default: ''
- name: buildConfiguration
  type: string
  default: 'Debug'
- name: keyVaultUrl
  type: string
  default: 'https://sugarman-keyvault.vault.azure.net/'
- name: certificateName
  type: string
  default: 'Test-Certificate-2'
- name: netfxTools
  type: string
  default: 'C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.8 Tools'
- name: dotNetTools
  type: string
  default: 'tools'

steps:
- task: DownloadSecureFile@1
  name: SigningKey
  displayName: 'Download Signing Key'
  inputs:
    secureFile: 'Sweetener.snk'

- task: AzureKeyVault@1
  displayName: 'Fetch Key Vault Secrets'
  inputs:
    azureSubscription: 'Sugarman Development'
    keyVaultName: 'Sugarman-KeyVault'
    secretsFilter: 'Test-Client-Id,Test-Client-Secret'

- task: UseDotNet@2
  displayName: 'Install .NET Core 3.x'
  inputs:
    packageType: 'sdk'
    version: '3.x'

- task: PowerShell@2
  name: Version
  displayName: 'Parse Version.json'
  inputs:
    targetType: 'inline'
    script: |
      # Parse Version.json
      & eng/Build/ParseVersion.ps1 -VersionFilePath "src/${{ parameters.Project }}/Version.json"

      # Determine whether version changed
      $Changed = @(& git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion)) -contains "src/${{ parameters.Project }}/Version.json"
      Write-Host "##vso[task.setvariable variable=Changed;isOutput=true]$Changed"
    pwsh: true

- task: DotNetCoreCLI@2
  displayName: 'Build Library'
  inputs:
    command: 'build'
    projects: 'src/${{ parameters.Project }}/${{ parameters.Project }}.csproj'
    arguments: '-c ${{ parameters.BuildConfiguration }} -p:ContinuousIntegrationBuild=true;AssemblyVersion=$(Version.Assembly);FileVersion=$(Version.File);InformationalVersion=$(Version.File)'
    nugetConfigPath: 'NuGet.config'

- task: PowerShell@2
  displayName: 'Sign Assemblies'
  inputs:
    filePath: 'eng/Build/CI/SignAssemblies.ps1'
    arguments: '-ProjectName "${{ parameters.Project }}"
                -BuildConfiguration "${{ parameters.BuildConfiguration }}"
                -StrongNameKeyPath "$(SigningKey.SecureFilePath)"
                -KeyVaultUrl "${{ parameters.KeyVaultUrl }}"
                -KeyVaultCertificateName "${{ parameters.CertificateName }}"
                -KeyVaultClientId "$(Test-Client-Id)"
                -KeyVaultClientSecret "$(Test-Client-Secret)"
                -NetFXTools "${{ parameters.NetFXTools }}"
                -DotNetTools "${{ parameters.DotNetTools }}"'
    pwsh: true

- task: DotNetCoreCLI@2
  displayName: 'Pack Library'
  inputs:
    command: 'pack'
    packagesToPack: 'src/${{ parameters.Project }}/${{ parameters.Project }}.csproj'
    configurationToPack: '${{ parameters.BuildConfiguration }}'
    buildProperties: 'ContinuousIntegrationBuild=true;PackageVersion=$(Version.Package)'
    nobuild: true
    nugetConfigPath: 'NuGet.config'
    verbosityPack: 'normal'

- task: PowerShell@2
  displayName: 'Sign NuGet Package'
  inputs:
    filePath: 'eng/Build/CI/SignPackage.ps1'
    arguments: '-ProjectName "${{ parameters.Project }}"
                -BuildConfiguration "${{ parameters.BuildConfiguration }}"
                -PackageVersion "$(Version.Package)"
                -KeyVaultUrl "${{ parameters.KeyVaultUrl }}"
                -KeyVaultCertificateName "${{ parameters.CertificateName }}"
                -KeyVaultClientId "$(Test-Client-Id)"
                -KeyVaultClientSecret "$(Test-Client-Secret)"
                -DotNetTools "${{ parameters.DotNetTools }}"'
    pwsh: true

- task: PublishPipelineArtifact@1
  displayName: 'Publish NuPkg Artifact'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'pkg'
    publishLocation: 'pipeline'
