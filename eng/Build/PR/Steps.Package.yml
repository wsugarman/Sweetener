parameters:
- name: project
  type: string
  default: ''
- name: buildConfiguration
  type: string
  default: 'Debug'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core 3.x'
  inputs:
    packageType: 'sdk'
    version: '3.x'

- task: PowerShell@2
  name: Version
  displayName: 'Parse Version.json'
  inputs:
    targetType: 'inline'
    script: |
      # Ignore any specified suffix and instead use the suffix "build"
      $VersionParts = Get-Content "src/${{ parameters.Project }}/Version.json" | Out-String | ConvertFrom-Json
      $AssemblyVersion = [string]::Format("{0}.0.0.0"            , $VersionParts.major)
      $FileVersion     = [string]::Format("{0}.{1}.{2}.{3}"      , $VersionParts.major, $VersionParts.minor, $VersionParts.patch, $(Build.BuildId))
      $PackageVersion  = [string]::Format("{0}.{1}.{2}-build.{3}", $VersionParts.major, $VersionParts.minor, $VersionParts.patch, $(Build.BuildId))

      # Output variables to be used in the build
      Write-Host "##vso[task.setvariable variable=Assembly;isOutput=true]$AssemblyVersion"
      Write-Host "##vso[task.setvariable variable=File;isOutput=true]$FileVersion"
      Write-Host "##vso[task.setvariable variable=Package;isOutput=true]$PackageVersion"
    pwsh: true

- task: DotNetCoreCLI@2
  displayName: 'Build and Pack Library'
  inputs:
    command: 'pack'
    packagesToPack: 'src/${{ parameters.Project }}/${{ parameters.Project }}.csproj'
    configurationToPack: '${{ parameters.BuildConfiguration }}'
    buildProperties: 'ContinuousIntegrationBuild=true;AssemblyVersion=$(Version.Assembly);FileVersion=$(Version.File);InformationalVersion=$(Version.File);PackageVersion=$(Version.Package)'
    nugetConfigPath: 'NuGet.config'
    verbosityPack: 'normal'

- task: PublishPipelineArtifact@1
  displayName: 'Publish NuPkg'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'pkg'
    publishLocation: 'pipeline'
